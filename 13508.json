{"post_stream":{"posts":[{"id":56087,"name":"Merlijn Sebrechts","username":"galgalesh","avatar_template":"/user_avatar/forum.snapcraft.io/galgalesh/{size}/9283_2.png","created_at":"2019-10-02T15:15:48.926Z","cooked":"\u003ch2\u003eWhy are snaps good for GTK+ 2 applications?\u003c/h2\u003e\n\u003cp\u003eSnapcraft bundles necessary libraries required by the application, and can configure the environment for confinement of applications for end user peace of mind. Developers can ensure their application is delivered pre-packaged with libraries which will not be replaced or superseded by a distribution vendor.\u003c/p\u003e\n\u003cp\u003eHere are some snap advantages that will benefit many GTK+ 2 applications:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eSnaps are easy to discover and install\u003c/strong\u003e\u003cbr\u003e\nMillions of users can browse and install snaps graphically in the Ubuntu Software Center, the Snap Store or from the command-line.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eSnaps install and run the same across Linux\u003c/strong\u003e\u003cbr\u003e\nThey bundle the exact version of whatever is required, along with all of your app’s dependencies, be they binaries or system libraries.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eYou control the release schedule\u003c/strong\u003e\u003cbr\u003e\nYou decide when a new version of your application is released without having to wait for distributions to catch up.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eSnaps automatically update to the latest version\u003c/strong\u003e\u003cbr\u003e\nFour times a day, users’ systems will check for new versions and upgrade in the background.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eUpgrades are not disruptive\u003c/strong\u003e\u003cbr\u003e\nBecause upgrades are not in-place, users can keep your app open as it’s upgraded in the background.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eUpgrades are safe\u003c/strong\u003e\u003cbr\u003e\nIf your app fails to upgrade, users automatically roll back to the previous revision.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eBuild a snap in 20 minutes\u003c/h2\u003e\n\u003cp\u003eTypically this guide will take around 20 minutes and will result in a working GTK application in a snap. Once complete, you’ll understand how to package GTK+ 2 applications as snaps and deliver them to millions of Linux users. After making the snap available in the store, you’ll get access to installation metrics and tools to directly manage the delivery of updates to Linux users.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eⓘ For a brief overview of the snap creation process, including how to install \u003cem\u003esnapcraft\u003c/em\u003e and how it’s used, see \u003ca href=\"/t/snapcraft-overview/8940\"\u003eSnapcraft overview\u003c/a\u003e. For a more comprehensive breakdown of the steps involved, take a look at \u003ca href=\"/t/creating-a-snap/6799\"\u003eCreating a snap\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eGetting started\u003c/h2\u003e\n\u003cp\u003eSnaps are defined in a single YAML file placed in the root folder of your project. The following example shows \u003ca href=\"https://github.com/galgalesh/arduino-example/blob/master/snap/snapcraft.yaml\" rel=\"noopener nofollow ugc\"\u003ethe entire \u003cem\u003esnapcraft.yaml\u003c/em\u003e file for the Arduino IDE\u003c/a\u003e. Don’t worry, we’ll break this down.\u003c/p\u003e\n\u003ch3\u003eArduino IDE Snap\u003c/h3\u003e\n\u003cp\u003eSnaps are defined in a single yaml file placed in the root of your project. The Arduino IDE example shows the entire snapcraft.yaml for an existing project. We’ll break this down.\u003c/p\u003e\n\u003cdetails\u003e\n\u003csummary\u003e\nsnapcraft.yaml for Arduino IDE\u003c/summary\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003ename: arduino\ntitle: Arduino IDE\nversion: 1.8.12\nsummary: Write code and upload it to your Arduino-compatible board.\ndescription: |\n  Arduino is an open-source physical computing platform based on a simple I/O board and a development environment that implements the Processing/Wiring language. Arduino can be used to develop stand-alone interactive objects or can be connected to software on your computer (e.g. Flash, Processing and MaxMSP). The boards can be assembled by hand or purchased preassembled at https://arduino.cc\n\n  **Setup**\n\n  In order to upload code an arduino board over USB, you need to add your user to the `dailout` group and connect the snap to the `raw-usb` socket. Open a terminal window, run the following commands an *reboot* your computer.\n\n  \u0026gt; `sudo usermod -a -G dialout $USER`\n\n  \u0026gt; `sudo snap connect arduino:raw-usb`\n\n  Now restart your computer and you're good to go!\nlicense: GPL-2.0\nicon: snap/gui/arduino.png\ngrade: stable\n\nbase: core18\nconfinement: strict\n\narchitectures:\n  - build-on: amd64\n  - build-on: i386\n  - build-on: armhf\n  - build-on: arm64\n\napps:\n  arduino:\n    command: desktop-launch $SNAP/arduino-snap\n    environment:\n      # Fallback to XWayland if running in a Wayland session.\n      DISABLE_WAYLAND: 1\n    plugs:\n      - x11\n      - unity7\n      - home\n      - network\n      - serial-port\n      - raw-usb\n  builder:\n    command: arduino-builder\n\nparts:\n  upstream:\n    source:\n      - on amd64: https://www.arduino.cc/download.php?f=/arduino-$SNAPCRAFT_PROJECT_VERSION-linux64.tar.xz\n      - on i386: https://www.arduino.cc/download.php?f=/arduino-$SNAPCRAFT_PROJECT_VERSION-linux32.tar.xz\n      - on armhf: https://www.arduino.cc/download.php?f=/arduino-$SNAPCRAFT_PROJECT_VERSION-linuxarm.tar.xz\n      - on arm64: https://www.arduino.cc/download.php?f=/arduino-$SNAPCRAFT_PROJECT_VERSION-linuxaarch64.tar.xz\n    source-type: tar\n    plugin: dump\n    prime:\n      - -install.sh\n      - -uninstall.sh\n      - -java/lib/ext/jfxrt.jar\n      - -java/lib/jfxswt.jar\n      - -java/lib/*/libjfxwebkit.so\n      - -java/lib/*/libjfxmedia.so\n    stage-packages:\n      - libxtst6\n      - libcanberra-gtk-module\n    after:\n      - desktop-gtk2\n  launcher:\n    plugin: dump\n    source: scripts\n    prime:\n      - arduino-snap\n\n  # This part installs the `desktop-launch` script which initialises desktop\n  # features such as fonts, themes and the XDG environment. It also installs\n  # the GTK2 runtime libraries.\n  #\n  # It is copied straight from the snapcraft desktop helpers project. Please\n  # periodically check the source for updates and copy the changes.\n  #    https://github.com/ubuntu/snapcraft-desktop-helpers/blob/master/snapcraft.yaml\n  #\n  desktop-gtk2:\n    source: https://github.com/ubuntu/snapcraft-desktop-helpers.git\n    source-subdir: gtk\n    plugin: make\n    make-parameters: [\"FLAVOR=gtk2\"]\n    build-packages:\n      - build-essential\n      - libgtk2.0-dev\n    stage-packages:\n      - libxkbcommon0  # XKB_CONFIG_ROOT\n      - ttf-ubuntu-font-family\n      - dmz-cursor-theme\n      - light-themes\n      - adwaita-icon-theme\n      - gnome-themes-standard\n      - shared-mime-info\n      - libgtk2.0-0\n      - libgdk-pixbuf2.0-0\n      - libglib2.0-bin\n      - libgtk2.0-bin\n      - unity-gtk2-module\n      - locales-all\n      - libappindicator1\n      - xdg-user-dirs\n      - ibus-gtk\n      - libibus-1.0-5\n\nplugs:\n  gtk-2-engines:\n    interface: content\n    target: $SNAP/lib/gtk-2.0\n    default-provider: gtk2-common-themes\n  gtk-2-themes:\n    interface: content\n    target: $SNAP/data-dir/themes\n    default-provider: gtk-common-themes\n  icon-themes:\n    interface: content\n    target: $SNAP/data-dir/icons\n    default-provider: gtk-common-themes\n  sound-themes:\n    interface: content\n    target: $SNAP/data-dir/sounds\n    default-provider: gtk-common-themes\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\u003ch2\u003eMetadata\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003esnapcraft.yaml\u003c/code\u003e file starts with a small amount of human-readable metadata, which usually can be lifted from the GitHub description or project README.md. This data is used in the presentation of your app in the Snap Store.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003ename: arduino\ntitle: Arduino IDE\nversion: 1.8.12\nsummary: Write code and upload it to your Arduino-compatible board.\ndescription: |\n  Arduino is an open-source physical computing platform based on a simple I/O board and a development environment that implements the Processing/Wiring language. Arduino can be used to develop stand-alone interactive objects or can be connected to software on your computer (e.g. Flash, Processing and MaxMSP). The boards can be assembled by hand or purchased preassembled at https://arduino.cc\n\n  **Setup**\n\n  In order to upload code an arduino board over USB, you need to add your user to the `dailout` group and connect the snap to the `raw-usb` socket. Open a terminal window, run the following commands an *reboot* your computer.\n\n  \u0026gt; `sudo usermod -a -G dialout $USER`\n\n  \u0026gt; `sudo snap connect arduino:raw-usb`\n\n  Now restart your computer and you're good to go!\nlicense: GPL-2.0\nicon: snap/gui/arduino.png\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ename\u003c/code\u003e must be unique in the Snap Store. Valid snap names consist of lower-case alphanumeric characters and hyphens. They cannot be all numbers and they also cannot start or end with a hyphen.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003esummary\u003c/code\u003e can not exceed 79 characters. You can use a chevron ‘\u0026gt;’ in the description key to declare a multi-line description.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eversion\u003c/code\u003e parameter is an arbitrary string containing the \u003cem\u003euser-facing\u003c/em\u003e version number.\u003c/p\u003e\n\u003ch2\u003eBase\u003c/h2\u003e\n\u003cp\u003eThe \u003ccode\u003ebase\u003c/code\u003e keyword defines a special kind of snap that provides a run-time environment with a minimal set of libraries that are common to most applications. They’re transparent to users, but they need to be considered, and specified, when building a snap.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003ebase: core18\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ca href=\"https://snapcraft.io/core18\" rel=\"noopener nofollow ugc\"\u003e\u003ccode\u003ecore18\u003c/code\u003e\u003c/a\u003e is the current standard base for snap building and is based on \u003ca href=\"http://releases.ubuntu.com/18.04/\" rel=\"noopener nofollow ugc\"\u003eUbuntu 18.04 LTS\u003c/a\u003e.\u003c/p\u003e\n\u003ch2\u003eSecurity model\u003c/h2\u003e\n\u003cp\u003eTo get started, we won’t \u003ca href=\"/t/snap-confinement/6233\"\u003econfine\u003c/a\u003e this application. Unconfined applications, specified with \u003ccode\u003edevmode\u003c/code\u003e, can only be released to the hidden “edge” channel where you and other developers can install them. After you get the snap working in \u003ccode\u003edevmode\u003c/code\u003e confinement, you can switch to strict mode and figure out which interfaces (plugs) the snap uses.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003econfinement: devmode\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eApps\u003c/h2\u003e\n\u003cp\u003eApps are the commands and services exposed to end users. If your command name matches the snap \u003ccode\u003ename\u003c/code\u003e, users will be able run the command directly. If the names differ, then apps are prefixed with the snap \u003ccode\u003ename\u003c/code\u003e (\u003ccode\u003earduino.builder\u003c/code\u003e, for example). This is to avoid conflicting with apps defined by other installed snaps.\u003c/p\u003e\n\u003cp\u003eIf you don’t want your command prefixed you can request an alias for it on the \u003ca href=\"https://forum.snapcraft.io/t/process-for-reviewing-aliases-auto-connections-and-track-requests/455\"\u003eSnapcraft forum\u003c/a\u003e. These are set up automatically when your snap is installed from the Snap Store.\u003c/p\u003e\n\u003cp\u003eWe declare two applications. The \u003ccode\u003earduino\u003c/code\u003e command starts the IDE GUI and the \u003ccode\u003ebuilder\u003c/code\u003e command starts a CLI application.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003eapps:\n  arduino:\n    command: desktop-launch $SNAP/arduino-snap\n    environment:\n      # Fallback to XWayland if running in a Wayland session.\n      DISABLE_WAYLAND: 1\n    plugs:\n      - x11\n      - unity7\n      - home\n      - network\n      - serial-port\n      - raw-usb\n  builder:\n    command: arduino-builder\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003edesktop-launch\u003c/code\u003e script initializes the environment for GTK+ 2 applications. This script is provided by the \u003ccode\u003edesktop-gtk2\u003c/code\u003e part defined below.\u003c/p\u003e\n\u003cp\u003eSince GTK+ 2 does not support wayland, it’s best to set \u003ccode\u003eDISABLE_WAYLAND: 1\u003c/code\u003e to fallback to XWayland when running in a wayland session.\u003c/p\u003e\n\u003cp\u003eThe GUI application uses a number of \u003ccode\u003eplugs\u003c/code\u003e to create a window and use desktop features. It also uses \u003ccode\u003eraw-usb\u003c/code\u003e and \u003ccode\u003eserial-port\u003c/code\u003e for access to Arduino boards.\u003c/p\u003e\n\u003ch2\u003eParts\u003c/h2\u003e\n\u003cp\u003eParts define how to build your app. Parts can be anything: programs, libraries, or other assets needed to create and run your application. In this case we have three: the Arduino release tarball, a launcher script and the \u003ccode\u003edesktop-gtk2\u003c/code\u003e helper part.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003edesktop-gtk2\u003c/code\u003e part is copied from the \u003ca href=\"https://github.com/ubuntu/snapcraft-desktop-helpers\" rel=\"noopener nofollow ugc\"\u003eSnapcraft Desktop Helpers\u003c/a\u003e repository and contains the GTK+ 2 runtime libraries and the \u003ccode\u003edesktop-launch\u003c/code\u003e script to configure the environment for GTK+ 2.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003eparts:\n  upstream:\n    source:\n      - on amd64: https://www.arduino.cc/download.php?f=/arduino-$SNAPCRAFT_PROJECT_VERSION-linux64.tar.xz\n      - on i386: https://www.arduino.cc/download.php?f=/arduino-$SNAPCRAFT_PROJECT_VERSION-linux32.tar.xz\n      - on armhf: https://www.arduino.cc/download.php?f=/arduino-$SNAPCRAFT_PROJECT_VERSION-linuxarm.tar.xz\n      - on arm64: https://www.arduino.cc/download.php?f=/arduino-$SNAPCRAFT_PROJECT_VERSION-linuxaarch64.tar.xz\n    source-type: tar\n    plugin: dump\n    prime:\n      - -install.sh\n      - -uninstall.sh\n      - -java/lib/ext/jfxrt.jar\n      - -java/lib/jfxswt.jar\n      - -java/lib/*/libjfxwebkit.so\n      - -java/lib/*/libjfxmedia.so\n    stage-packages:\n      - libxtst6\n      - libcanberra-gtk-module\n    after:\n      - desktop-gtk2\n  launcher:\n    plugin: dump\n    source: scripts\n    prime:\n      - arduino-snap\n\n  # This part installs the `desktop-launch` script which initialises desktop\n  # features such as fonts, themes and the XDG environment. It also installs\n  # the GTK2 runtime libraries.\n  #\n  # It is copied straight from the snapcraft desktop helpers project. Please\n  # periodically check the source for updates and copy the changes.\n  #    https://github.com/ubuntu/snapcraft-desktop-helpers/blob/master/snapcraft.yaml\n  #\n  desktop-gtk2:\n    source: https://github.com/ubuntu/snapcraft-desktop-helpers.git\n    source-subdir: gtk\n    plugin: make\n    make-parameters: [\"FLAVOR=gtk2\"]\n    build-packages:\n      - build-essential\n      - libgtk2.0-dev\n    stage-packages:\n      - libxkbcommon0  # XKB_CONFIG_ROOT\n      - ttf-ubuntu-font-family\n      - dmz-cursor-theme\n      - light-themes\n      - adwaita-icon-theme\n      - gnome-themes-standard\n      - shared-mime-info\n      - libgtk2.0-0\n      - libgdk-pixbuf2.0-0\n      - libglib2.0-bin\n      - libgtk2.0-bin\n      - unity-gtk2-module\n      - locales-all\n      - libappindicator1\n      - xdg-user-dirs\n      - ibus-gtk\n      - libibus-1.0-5\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBefore building the part, the dependencies listed as \u003ccode\u003ebuild-packages\u003c/code\u003e are installed. \u003ccode\u003estage-packages\u003c/code\u003e are the packages required by the Arduino IDE to run, and mirror the same packages required by the binary on a standard distribution installation.\u003c/p\u003e\n\u003ch2\u003ePlugs\u003c/h2\u003e\n\u003cp\u003eThis snap connects to a number of desktop-specific content snaps in order to access common themes. These are provided by content snaps so that snaps don’t need to include every theme in the snap itself.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003eplugs:\n  gtk-2-engines:\n    interface: content\n    target: $SNAP/lib/gtk-2.0\n    default-provider: gtk2-common-themes\n  gtk-2-themes:\n    interface: content\n    target: $SNAP/data-dir/themes\n    default-provider: gtk-common-themes\n  icon-themes:\n    interface: content\n    target: $SNAP/data-dir/icons\n    default-provider: gtk-common-themes\n  sound-themes:\n    interface: content\n    target: $SNAP/data-dir/sounds\n    default-provider: gtk-common-themes\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eBuilding the snap\u003c/h3\u003e\n\u003cp\u003eYou can download the example repository with the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ git clone https://github.com/galgalesh/arduino-example.git\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAfter you’ve created the \u003cem\u003esnapcraft.yaml\u003c/em\u003e, you can build the snap by simply executing the \u003cem\u003esnapcraft\u003c/em\u003e command in the project directory:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft\nUsing 'snapcraft.yaml': Project assets will be searched for from the 'snap' directory.\nLaunching a VM.\n[...]\nSnapped arduino_1.8.12_amd64.snap\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe resulting snap can be installed locally. This requires the \u003ccode\u003e--dangerous\u003c/code\u003e flag because the snap is not signed by the Snap Store. The \u003ccode\u003e--devmode\u003c/code\u003e flag acknowledges that you are installing an unconfined application:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ sudo snap install arduino_1.8.12_amd64.snap --devmode --dangerous\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can then try it out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ arduino\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemoving the snap is simple too:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ sudo snap remove arduino\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can clean up the build environment with the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft clean\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBy default, when you make a change to snapcraft.yaml, snapcraft only builds the parts that have changed. Cleaning a build, however, forces your snap to be rebuilt in a clean environment and will take longer.\u003c/p\u003e\n\u003ch2\u003ePublishing your snap\u003c/h2\u003e\n\u003cp\u003eTo share your snaps you need to publish them in the Snap Store. First, create an account on \u003ca href=\"https://dashboard.snapcraft.io/dev/account/\" rel=\"noopener nofollow ugc\"\u003ethe dashboard\u003c/a\u003e. Here you can customise how your snaps are presented, review your uploads and control publishing.\u003c/p\u003e\n\u003cp\u003eYou’ll need to choose a unique “developer namespace” as part of the account creation process. This name will be visible by users and associated with your published snaps.\u003c/p\u003e\n\u003cp\u003eMake sure the \u003ccode\u003esnapcraft\u003c/code\u003e command is authenticated using the email address attached to your Snap Store account:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft login\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eReserve a name for your snap\u003c/h3\u003e\n\u003cp\u003eYou can publish your own version of a snap, provided you do so under a name you have rights to. You can register a name on \u003ca href=\"https://dashboard.snapcraft.io/register-snap/\" rel=\"noopener nofollow ugc\"\u003edashboard.snapcraft.io\u003c/a\u003e, or by running the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft register mysnap\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBe sure to update the \u003ccode\u003ename:\u003c/code\u003e in your \u003ccode\u003esnapcraft.yaml\u003c/code\u003e to match this registered name, then run \u003ccode\u003esnapcraft\u003c/code\u003e again.\u003c/p\u003e\n\u003ch3\u003eUpload your snap\u003c/h3\u003e\n\u003cp\u003eUse snapcraft to push the snap to the Snap Store.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft upload --release=edge mysnap_*.snap\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you’re happy with the result, you can commit the snapcraft.yaml to your GitHub repo and \u003ca href=\"https://build.snapcraft.io\" rel=\"noopener nofollow ugc\"\u003eturn on automatic builds\u003c/a\u003e so any further commits automatically get released to edge, without requiring you to manually build locally.\u003c/p\u003e\n\u003cp\u003eCongratulations! You’ve just built and published your first GTK+ 2 snap. For a more in-depth overview of the snap building process, see \u003ca href=\"/t/creating-a-snap/6799\"\u003eCreating a snap\u003c/a\u003e.\u003c/p\u003e","post_number":1,"post_type":1,"updated_at":"2020-06-10T08:23:10.106Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":247,"reads":35,"readers_count":34,"score":1284.0,"yours":false,"topic_id":13508,"topic_slug":"gtk2-applications","display_username":"Merlijn Sebrechts","primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_bg_color":null,"primary_group_flair_color":null,"version":3,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://github.com/ubuntu/snapcraft-desktop-helpers","internal":false,"reflection":false,"title":"GitHub - ubuntu/snapcraft-desktop-helpers: Various launchers for snapcraft wiki parts","clicks":4},{"url":"https://github.com/galgalesh/arduino-example/blob/master/snap/snapcraft.yaml","internal":false,"reflection":false,"clicks":3},{"url":"https://forum.snapcraft.io/t/creating-a-snap/6799","internal":true,"reflection":false,"title":"Creating a snap","clicks":1},{"url":"https://snapcraft.io/core18","internal":false,"reflection":false,"title":"Install Core 18 for Linux using the Snap Store | Snapcraft","clicks":1},{"url":"http://releases.ubuntu.com/18.04/","internal":false,"reflection":false,"title":"Ubuntu 18.04.4 LTS (Bionic Beaver)","clicks":1},{"url":"https://forum.snapcraft.io/t/snapcraft-overview/8940","internal":true,"reflection":false,"title":"Snapcraft overview","clicks":1},{"url":"https://dashboard.snapcraft.io/dev/account/","internal":false,"reflection":false,"clicks":0},{"url":"https://forum.snapcraft.io/t/snap-confinement/6233","internal":true,"reflection":false,"title":"Snap confinement","clicks":0},{"url":"https://build.snapcraft.io","internal":false,"reflection":false,"clicks":0},{"url":"https://dashboard.snapcraft.io/register-snap/","internal":false,"reflection":false,"clicks":0},{"url":"https://forum.snapcraft.io/t/process-for-aliases-auto-connections-and-tracks/455","internal":true,"reflection":false,"title":"Process for aliases, auto-connections and tracks","clicks":0},{"url":"https://forum.snapcraft.io/t/desktop-app-support-gtk/6834","internal":true,"reflection":true,"title":"Desktop App Support - GTK","clicks":4},{"url":"https://forum.snapcraft.io/t/desktop-applications/13034","internal":true,"reflection":true,"title":"Desktop applications","clicks":0},{"url":"https://forum.snapcraft.io/t/first-snap-attempt-gtk2-issues-transmission-remote-gui/16460","internal":true,"reflection":true,"title":"First snap attempt: GTK2 Issues (Transmission Remote GUI)","clicks":0},{"url":"https://forum.snapcraft.io/t/yaru-theme-not-working-correctly-with-gtk2-snaps/16663","internal":true,"reflection":true,"title":"Yaru theme not working correctly with gtk2 snaps","clicks":0},{"url":"https://forum.snapcraft.io/t/the-gnome-3-28-extension/13485","internal":true,"reflection":true,"title":"The gnome-3-28 extension","clicks":0},{"url":"https://forum.snapcraft.io/t/snapping-folding-home-distributed-computing-for-research-on-diseases/16021/4","internal":true,"reflection":true,"title":"Snapping Folding@Home, distributed computing for research on diseases","clicks":0},{"url":"https://forum.snapcraft.io/t/snap-documentation/11127","internal":true,"reflection":true,"title":"Snap documentation","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[{"id":2,"count":2}],"moderator":false,"admin":false,"staff":false,"user_id":1418,"hidden":false,"trust_level":3,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":true,"last_wiki_edit":"2020-06-10T08:23:10.147Z","can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[56087]},"timeline_lookup":[[1,1352]],"suggested_topics":[{"id":31214,"title":"ROS 2 shared memory in snaps","fancy_title":"ROS 2 shared memory in snaps","slug":"ros-2-shared-memory-in-snaps","posts_count":3,"reply_count":1,"highest_post_number":3,"image_url":null,"created_at":"2022-08-09T13:28:52.600Z","last_posted_at":"2022-08-23T09:55:20.580Z","bumped":true,"bumped_at":"2022-08-23T09:55:20.580Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":1,"views":1271,"category_id":15,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":11989,"username":"gbeuzeboc","name":"","avatar_template":"/letter_avatar/gbeuzeboc/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":2772,"username":"degville","name":"Graham Morrison","avatar_template":"/user_avatar/forum.snapcraft.io/degville/{size}/2021_2.png"}}]},{"id":30905,"title":"Snapcraft documentation","fancy_title":"Snapcraft documentation","slug":"snapcraft-documentation","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-07-15T11:05:45.374Z","last_posted_at":"2022-07-15T11:05:45.528Z","bumped":true,"bumped_at":"2023-02-17T19:55:21.024Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":0,"views":1532,"category_id":15,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":2772,"username":"degville","name":"Graham Morrison","avatar_template":"/user_avatar/forum.snapcraft.io/degville/{size}/2021_2.png"}}]},{"id":31152,"title":"Refresh awareness","fancy_title":"Refresh awareness","slug":"refresh-awareness","posts_count":5,"reply_count":1,"highest_post_number":5,"image_url":null,"created_at":"2022-08-04T11:13:22.373Z","last_posted_at":"2023-02-16T16:37:34.392Z","bumped":true,"bumped_at":"2023-02-16T16:37:34.392Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":2,"views":1730,"category_id":15,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":2772,"username":"degville","name":"Graham Morrison","avatar_template":"/user_avatar/forum.snapcraft.io/degville/{size}/2021_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":13385,"username":"ernstklrb","name":"","avatar_template":"/letter_avatar/ernstklrb/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":1903,"username":"dhoomakethu","name":"dhoomkethu","avatar_template":"/letter_avatar/dhoomakethu/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":1418,"username":"galgalesh","name":"Merlijn Sebrechts","avatar_template":"/user_avatar/forum.snapcraft.io/galgalesh/{size}/9283_2.png"}}]},{"id":34097,"title":"Set up classic confinement for a Makefile project","fancy_title":"Set up classic confinement for a Makefile project","slug":"set-up-classic-confinement-for-a-makefile-project","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2023-02-27T16:32:26.768Z","last_posted_at":"2023-02-27T16:34:00.750Z","bumped":true,"bumped_at":"2023-02-27T16:34:00.750Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":["how-to"],"like_count":0,"views":762,"category_id":15,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":14015,"username":"dboddie","name":"David Boddie","avatar_template":"/user_avatar/forum.snapcraft.io/dboddie/{size}/9564_2.png"}}]},{"id":32229,"title":"Library linter","fancy_title":"Library linter","slug":"library-linter","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2022-10-18T17:35:43.980Z","last_posted_at":"2022-10-19T03:00:57.683Z","bumped":true,"bumped_at":"2022-10-19T03:00:57.683Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":3,"views":793,"category_id":15,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":3793,"username":"cmatsuoka","name":"Claudio Matsuoka","avatar_template":"/user_avatar/forum.snapcraft.io/cmatsuoka/{size}/9338_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":393,"username":"jamesh","name":"James Henstridge","avatar_template":"/user_avatar/forum.snapcraft.io/jamesh/{size}/3947_2.png"}}]}],"tags":[],"id":13508,"title":"GTK2 Applications","fancy_title":"GTK2 Applications","posts_count":1,"created_at":"2019-10-02T15:15:48.708Z","views":4658,"reply_count":0,"like_count":2,"last_posted_at":"2019-10-02T15:15:48.926Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"gtk2-applications","category_id":15,"word_count":2470,"deleted_at":null,"user_id":1418,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_13508","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":1,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"topic_timer":null,"message_bus_last_id":0,"participant_count":1,"show_read_indicator":false,"thumbnails":null,"details":{"notification_level":1,"participants":[{"id":1418,"username":"galgalesh","name":"Merlijn Sebrechts","avatar_template":"/user_avatar/forum.snapcraft.io/galgalesh/{size}/9283_2.png","post_count":1,"primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_color":null,"primary_group_flair_bg_color":null}],"created_by":{"id":1418,"username":"galgalesh","name":"Merlijn Sebrechts","avatar_template":"/user_avatar/forum.snapcraft.io/galgalesh/{size}/9283_2.png"},"last_poster":{"id":1418,"username":"galgalesh","name":"Merlijn Sebrechts","avatar_template":"/user_avatar/forum.snapcraft.io/galgalesh/{size}/9283_2.png"},"links":[{"url":"https://github.com/ubuntu/snapcraft-desktop-helpers","title":"GitHub - ubuntu/snapcraft-desktop-helpers: Various launchers for snapcraft wiki parts","internal":false,"attachment":false,"reflection":false,"clicks":4,"user_id":1418,"domain":"github.com","root_domain":"github.com"},{"url":"https://forum.snapcraft.io/t/desktop-app-support-gtk/6834","title":"Desktop App Support - GTK","internal":true,"attachment":false,"reflection":true,"clicks":4,"user_id":14,"domain":"forum.snapcraft.io","root_domain":"snapcraft.io"},{"url":"https://github.com/galgalesh/arduino-example/blob/master/snap/snapcraft.yaml","title":null,"internal":false,"attachment":false,"reflection":false,"clicks":3,"user_id":1418,"domain":"github.com","root_domain":"github.com"},{"url":"https://snapcraft.io/core18","title":"Install Core 18 for Linux using the Snap Store | Snapcraft","internal":false,"attachment":false,"reflection":false,"clicks":1,"user_id":1418,"domain":"snapcraft.io","root_domain":"snapcraft.io"},{"url":"https://forum.snapcraft.io/t/snapcraft-overview/8940","title":"Snapcraft overview","internal":true,"attachment":false,"reflection":false,"clicks":1,"user_id":1418,"domain":"forum.snapcraft.io","root_domain":"snapcraft.io"},{"url":"https://forum.snapcraft.io/t/creating-a-snap/6799","title":"Creating a snap","internal":true,"attachment":false,"reflection":false,"clicks":1,"user_id":1418,"domain":"forum.snapcraft.io","root_domain":"snapcraft.io"},{"url":"http://releases.ubuntu.com/18.04/","title":"Ubuntu 18.04.4 LTS (Bionic Beaver)","internal":false,"attachment":false,"reflection":false,"clicks":1,"user_id":1418,"domain":"releases.ubuntu.com","root_domain":"ubuntu.com"}]}}