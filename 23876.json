{"post_stream":{"posts":[{"id":90848,"name":"James Henstridge","username":"jamesh","avatar_template":"/user_avatar/forum.snapcraft.io/jamesh/{size}/3947_2.png","created_at":"2021-04-14T09:56:17.907Z","cooked":"\u003cp\u003eThis is a cleaned up and more concrete version of \u003ca href=\"https://forum.snapcraft.io/t/allow-snapped-daemons-to-use-polkit-authorisation/9050\"\u003emy proposal about polkit support from a few years ago\u003c/a\u003e. The proposed design for the \u003ccode\u003epolkit\u003c/code\u003e interface is mostly finished.  There are some areas where \u003ccode\u003epolkit-agent\u003c/code\u003e needs to be fleshed out a bit, but I think it is at a point where it could do with some feedback.\u003c/p\u003e\n\u003cp\u003eHere are one sentence summaries of what the two interfaces enable:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ccode\u003epolkit\u003c/code\u003e: allow daemons permission to use polkitd to make access control decisions for requests from unprivileged clients.\u003c/li\u003e\n\u003cli\u003e\n\u003ccode\u003epolkit-agent\u003c/code\u003e: allow a snap to act as a polkit agent to grant access to a group of related processes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe first is the more generally useful interface.  The second would mostly be useful on Ubuntu Core based systems that implement a user session.\u003c/p\u003e\n\u003ch2\u003e\n\u003ccode\u003epolkit\u003c/code\u003e interface\u003c/h2\u003e\n\u003ch3\u003eDescription of access\u003c/h3\u003e\n\u003cp\u003eTo perform polkit authorization checks, a daemon needs to do two things:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInstall a .policy file to \u003ccode\u003e/usr/share/polkit-1/actions\u003c/code\u003e describing the actions it will use (codifying the type of administrative access a user might be granted).\u003c/li\u003e\n\u003cli\u003eBefore performing administrative work on behalf of a client app, make a \u003ccode\u003eCheckAuthorization\u003c/code\u003e D-Bus call to polkitd to ask if they have access.  The D-Bus call passes a string action ID describing the access, and a “subject” struct describing the client application.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThere are two primary ways a daemon can describe the subject of the check:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFor D-Bus daemons they can use a \u003ccode\u003esystem-bus-name\u003c/code\u003e subject, sending the unique bus name of the client app.\u003c/li\u003e\n\u003cli\u003eFor non-D-Bus daemons, they can use a \u003ccode\u003eunix-process\u003c/code\u003e subject, sending the process ID (as retrieved through \u003ccode\u003eSO_PEERCRED\u003c/code\u003e or \u003ccode\u003eSCM_CREDENTIALS\u003c/code\u003e).\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn the initial implementation of the interface, I suggest we focus on daemons using \u003ccode\u003esystem-bus-name\u003c/code\u003e subjects, since they are more common and can be more strictly confined.\u003c/p\u003e\n\u003ch3\u003eProposed Implementation\u003c/h3\u003e\n\u003cp\u003eI propose that a snap would define a plug with something like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003eplugs:\n  polkit:\n    action-prefix: \"org.example.foo\"\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003eaction-prefix\u003c/code\u003e plug attribute would be mandatory, and indicate that all actions published by the snap are equal to the action prefix or match \u003ccode\u003e${action-prefix}.*\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAn implicit \u003ccode\u003epolkit\u003c/code\u003e slot would be provided on systems where polkit authorisation is available.  At present this means it would be \u003ccode\u003eimplicitOnClassic\u003c/code\u003e.  If we add polkit to Ubuntu Core in future, it\u003cbr\u003e\nwould make sense to provide the slot there as well.\u003c/p\u003e\n\u003cp\u003eThe base declaration should probably look somewhat similar to e.g. \u003ccode\u003esystem-files\u003c/code\u003e, requiring a snap declaration from the store to install that would give some oversight to make sure the prefix was set\u003cbr\u003e\nappropriately.\u003c/p\u003e\n\u003cp\u003eThe connected plug AppArmor rules for the interface would be as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# Allow communication with polkitd on the D-Bus system bus\n#include \u0026lt;abstractions/dbus-strict\u0026gt;\ndbus (send)\n    bus=system\n    path=\"/org/freedesktop/PolicyKit1/Authority\"\n    interface=\"org.freedesktop.PolicyKit1.Authority\"\n    member=\"{,Cancel}CheckAuthorization\"\n    peer=(name=\"org.freedesktop.PolicyKit1\", label=unconfined),\ndbus (send)\n    bus=system\n    path=\"/org/freedesktop/PolicyKit1/Authority\"\n    interface=\"org.freedesktop.DBus.Properties\"\n    peer=(name=\"org.freedesktop.PolicyKit1\", label=unconfined),\ndbus (send)\n    bus=system\n    path=\"/org/freedesktop/PolicyKit1/Authority\"\n    interface=\"org.freedesktop.DBus.Introspectable\"\n    member=\"Introspect\"\n    peer=(name=\"org.freedesktop.PolicyKit1\", label=unconfined),\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn addition, the interface code will expect a file \u003ccode\u003e$SNAP/meta/${plug_name}.policy\u003c/code\u003e to exist.  When the plug is connected, this file will be validated to make sure it conforms to the documented format and only describes actions matching the specified \u003ccode\u003eaction-prefix\u003c/code\u003e.  There is an initial implementation of this validation in \u003ca href=\"https://github.com/snapcore/snapd/pull/9986\" rel=\"noopener nofollow ugc\"\u003esnapd PR #9986\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhen the plug is connected, the .policy file will be copied to \u003ccode\u003e/usr/share/polkit-1/actions/snap.${SNAP_INSTANCE_NAME}.${plug_name}.policy\u003c/code\u003e. When the plug is disconnected, the file will be removed.  On snap removal, all \u003ccode\u003esnap.${SNAP_INSTANCE_NAME}.*.policy\u003c/code\u003e files should be\u003cbr\u003e\nremoved from that directory.\u003c/p\u003e\n\u003ch3\u003eQuestions\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eCould the .policy files be auto-generated instead of being provided by the snap?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThis was something previously suggested by \u003ca class=\"mention\" href=\"/u/jdstrand\"\u003e@jdstrand\u003c/a\u003e, with e.g. the set of actions for NetworkManager being encoded into the \u003ccode\u003enetwork-manager\u003c/code\u003e interface, and output when the corresponding interface is plugged.  There are a number of issues that I think make this unworkable:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003ethe list of actions a particular daemon uses can change from version to version.\u003c/li\u003e\n\u003cli\u003ethe .policy file contains translations of action messages and descriptions. Even if the list of actions don’t change between two releases, it is not uncommon for the daemon to pick up new translations.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eWhat about daemons not using D-Bus?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eThe main difficulty in using the \u003ccode\u003eunix-process\u003c/code\u003e subject type is that you need to include \u003ccode\u003estart-time\u003c/code\u003e of the process as a way to protect against pid reuse attacks.  This information is not provided in the\u003cbr\u003e\n\u003ccode\u003estruct ucred\u003c/code\u003e, and needs to be read from \u003ccode\u003e/proc\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSo a daemon using this method will need read access to \u003ccode\u003e/proc/*/stat\u003c/code\u003e. We can’t restrict it with \u003ccode\u003e@owner\u003c/code\u003e either, since the whole point is to allow daemons running as root to act on behalf of unprivileged users.\u003c/p\u003e\n\u003cp\u003eWe could handle this in one of two ways:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003erequire such daemons to plug \u003ccode\u003esystem-observe\u003c/code\u003e, which grants the required access plus a lot more.\u003c/li\u003e\n\u003cli\u003eadd another plug attribute to enable the required access.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eShould snaps be able to install polkit rules?\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI think we should punt on this in the short term.  At present, there are two incompatible formats for rules:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003ethe \u003ccode\u003e.pkla\u003c/code\u003e ini-style rule files supported by polkit \u0026lt;= 0.105\u003c/li\u003e\n\u003cli\u003ethe \u003ccode\u003e.rules\u003c/code\u003e JavaScript files supported by polkit \u0026gt; 0.105.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAt present, Debian-derived distros (including Ubuntu) ship polkit 0.105 with many patches from later versions applied.\u003c/p\u003e\n\u003cp\u003eIt wouldn’t be too difficult to validate \u003ccode\u003e.pkla\u003c/code\u003e files, but they will be ignored by most non-Debian distributions. In contrast, \u003ccode\u003e.rules\u003c/code\u003e files are arbitrary JavaScript.  While polkitd does run them in a web browser style sandbox and imposes a strict time limit, it does represent a way to execute code in the context of an unconfined system daemon.\u003c/p\u003e\n\u003cp\u003eSo I think it best to not support this until we have a concrete use case.\u003c/p\u003e\n\u003ch2\u003e\n\u003ccode\u003epolkit-agent\u003c/code\u003e interface\u003c/h2\u003e\n\u003ch3\u003eDescription of access\u003c/h3\u003e\n\u003cp\u003eA polkit agent registers with polkitd as being responsible for authorising requests on behalf of other processes, usually those belonging to a particular logind session ID.  The control flow essentially goes like this:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eagent registers itself with polkitd by calling its \u003ccode\u003eRegisterAuthenticationAgentWithOptions\u003c/code\u003e method.  This provides an object path on which polkitd can send method calls to the agent.\u003c/li\u003e\n\u003cli\u003eWhen polkitd is asked to perform an authorization check for a process the agent is responsible for, the agent receives a \u003ccode\u003eBeginAuthentication\u003c/code\u003e method call.\u003c/li\u003e\n\u003cli\u003eThe agent verifies that the user’s password with the help of the setuid \u003ccode\u003e/usr/libexec/polkit-agent-helper-1\u003c/code\u003e helper.\u003c/li\u003e\n\u003cli\u003eOn completion, \u003ccode\u003epolkit-agent-helper-1\u003c/code\u003e sends calls polkitd’s \u003ccode\u003eAuthenticationAgentResponse2\u003c/code\u003e method to report the status.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe \u003ccode\u003epolkit-agent-helper-1\u003c/code\u003e process uses PAM to validate the password, so can not reasonably run on a classic system where there could be any PAM modules registered.  We have a bit more certainty on Ubuntu Core systems where the account system is more regular.\u003c/p\u003e\n\u003ch3\u003eProposed implementation\u003c/h3\u003e\n\u003cp\u003eOn relevant Ubuntu Core systems, an implicit system slot would be defined for the \u003ccode\u003epolkit-agent\u003c/code\u003e interface.  Snaps that wish to act as polkit agents would have a corresponding plug.  This interface would not require interface attributes.\u003c/p\u003e\n\u003cp\u003eThe connected plug AppArmor rules for this interface would preferably transition to a sub-profile on execution of \u003ccode\u003epolikit-agent-helper-1\u003c/code\u003e. I’m not yet sure exactly what that part of the rules needs to look like though.  The D-Bus parts would be something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# Allow communication with polkitd on the D-Bus system bus\n#include \u0026lt;abstractions/dbus-strict\u0026gt;\ndbus (send)\n    bus=system\n    path=\"/org/freedesktop/PolicyKit1/Authority\"\n    interface=\"org.freedesktop.PolicyKit1.Authority\"\n    member=\"{RegisterAuthenticationAgent,RegisterAuthenticationAgentWithOptions,UnregisterAuthenticationAgent,AuthenticationAgentResponse,AuthenticationAgentResponse2}\"\n    peer=(name=\"org.freedesktop.PolicyKit1\", label=unconfined),\ndbus (send)\n    bus=system\n    path=\"/org/freedesktop/PolicyKit1/Authority\"\n    interface=\"org.freedesktop.DBus.Properties\"\n    peer=(name=\"org.freedesktop.PolicyKit1\", label=unconfined),\ndbus (send)\n    bus=system\n    path=\"/org/freedesktop/PolicyKit1/Authority\"\n    interface=\"org.freedesktop.DBus.Introspectable\"\n    member=\"Introspect\"\n    peer=(name=\"org.freedesktop.PolicyKit1\", label=unconfined),\n\n# Allow polkitd to communicate with the agent\ndbus (receive)\n    bus=system\n    interface=\"org.freedesktop.PolicyKit1.AuthenticationAgent\"\n    peer=(name=\"org.freedesktop.PolicyKit1\", label=unconfined),\n\n# Allow agent to execute polkit-agent-helper-1\n/usr/libexec/polkit-agent-helper-1 Cxr -\u0026gt; polkit_agent_helper,\n\nprofile polkit_agent_helper (attach_disconnected,mediate_deleted) {\n...\n},\n\u003c/code\u003e\u003c/pre\u003e","post_number":1,"post_type":1,"updated_at":"2021-04-15T06:29:46.626Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":159,"reads":20,"readers_count":19,"score":809.0,"yours":false,"topic_id":23876,"topic_slug":"proposal-add-polkit-and-polkit-agent-interfaces-to-snapd","display_username":"James Henstridge","primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_bg_color":null,"primary_group_flair_color":null,"version":4,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://forum.snapcraft.io/t/allow-snapped-daemons-to-use-polkit-authorisation/9050","internal":true,"reflection":false,"title":"Allow snapped daemons to use polkit authorisation","clicks":3},{"url":"https://github.com/snapcore/snapd/pull/9986","internal":false,"reflection":false,"title":"polkit: add a package to validate polkit policy files by jhenstridge · Pull Request #9986 · snapcore/snapd · GitHub","clicks":1},{"url":"https://forum.snapcraft.io/t/enabling-polkitd-on-ubuntu-core/31295","internal":true,"reflection":true,"title":"Enabling polkitd on Ubuntu Core","clicks":0},{"url":"https://forum.snapcraft.io/t/the-polkit-interface/28408","internal":true,"reflection":true,"title":"The polkit interface","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[{"id":2,"count":1}],"moderator":false,"admin":false,"staff":false,"user_id":393,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":91631,"name":"Alex Murray","username":"alexmurray","avatar_template":"/user_avatar/forum.snapcraft.io/alexmurray/{size}/4397_2.png","created_at":"2021-04-28T05:14:15.002Z","cooked":"\u003cp\u003eRegarding \u003ccode\u003eunix-process\u003c/code\u003e subjects, the base policy already specifies:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e@{PROC}/@{pid}/stat r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ewhich allows any snap to read \u003ccode\u003e/proc/$PID/stat\u003c/code\u003e for any other process (as there is no \u003ccode\u003eowner\u003c/code\u003e attribute here) assuming that traditional DAC permissions don’t get in the way. So I think it would be good to try and consider \u003ccode\u003eunix-process\u003c/code\u003e subjects in this implementation too.\u003c/p\u003e\n\u003cp\u003eI also think it is a good idea to not allow snaps to ship rules as this presents a large attack surface against untrusted input and on classic systems (whether these are javascript or not).\u003c/p\u003e\n\u003cp\u003eThe argument around snaps shipping action policy makes a lot of sense as these are more closely coupled with the application logic itself (similar to desktop files) so this seems most appropriate to take the approach to validate them and allow snaps to provide them internally.\u003c/p\u003e\n\u003cp\u003eI also like the idea of the action-prefix but I wonder perhaps whether it would make more sense to try and unify this with the dbus slot review/granting mechanism - ie. a snap declares a particular reverse-DNS style name and whether this is used as a DBus slot and/or polkit and then from the store we grant the use of a given name for one or both after manual review. Would this make more sense to a snap author?\u003c/p\u003e","post_number":2,"post_type":1,"updated_at":"2021-04-28T05:14:15.002Z","reply_count":1,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":13,"readers_count":12,"score":22.6,"yours":false,"topic_id":23876,"topic_slug":"proposal-add-polkit-and-polkit-agent-interfaces-to-snapd","display_username":"Alex Murray","primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_bg_color":null,"primary_group_flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":"policy-reviewers","title_is_group":false,"bookmarked":false,"actions_summary":[{"id":2,"count":1}],"moderator":true,"admin":false,"staff":true,"user_id":2432,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":91632,"name":"James Henstridge","username":"jamesh","avatar_template":"/user_avatar/forum.snapcraft.io/jamesh/{size}/3947_2.png","created_at":"2021-04-28T05:44:13.942Z","cooked":"\u003cp\u003eThanks for having a look at this!\u003c/p\u003e\n\u003cp\u003eI handn’t realised that the \u003ccode\u003e@{PROC}/@{pid}\u003c/code\u003e rules in the base template matched data for all processes. That means that there is no additional permissions needed for servers that use unix-process subjects rather than system-bus-name.\u003c/p\u003e\n\u003cp\u003eI agree that it might make sense to have a way to claim a reverse-dns prefix for multiple purposes in future.  I’m not sure if that should be a prerequisite for this feature.  I don’t think it is appropriate to simply snoop on the snap’s dbus interfaces to make a guess about what action prefixes it should be able to use: for a start, there’s no requirement that the server needs to own a system bus name to use polkit auth.\u003c/p\u003e\n\u003cp\u003eCould the manual review concerns be satisfied through new policy for reviewers? E.g. an assumption that a snap should be granted the ability to install action IDs prefixed by a system bus name they’ve previously been approved to own.\u003c/p\u003e","post_number":3,"post_type":1,"updated_at":"2021-04-28T05:44:13.942Z","reply_count":0,"reply_to_post_number":2,"quote_count":0,"incoming_link_count":2,"reads":12,"readers_count":11,"score":12.4,"yours":false,"topic_id":23876,"topic_slug":"proposal-add-polkit-and-polkit-agent-interfaces-to-snapd","display_username":"James Henstridge","primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_bg_color":null,"primary_group_flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"reply_to_user":{"username":"alexmurray","avatar_template":"/user_avatar/forum.snapcraft.io/alexmurray/{size}/4397_2.png"},"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":393,"hidden":false,"trust_level":2,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[90848,91631,91632]},"timeline_lookup":[[1,793],[2,779]],"suggested_topics":[{"id":34403,"title":"Lxc : snap-confine has elevated permissions and is not confined but should be","fancy_title":"Lxc : snap-confine has elevated permissions and is not confined but should be","slug":"lxc-snap-confine-has-elevated-permissions-and-is-not-confined-but-should-be","posts_count":3,"reply_count":1,"highest_post_number":3,"image_url":null,"created_at":"2023-03-20T15:26:39.751Z","last_posted_at":"2023-03-21T03:03:56.798Z","bumped":true,"bumped_at":"2023-03-21T03:03:56.798Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":0,"views":242,"category_id":5,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":14246,"username":"Jobin","name":"Augustine","avatar_template":"/user_avatar/forum.snapcraft.io/jobin/{size}/9684_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":9,"username":"ogra","name":"Oliver Grawert","avatar_template":"/user_avatar/forum.snapcraft.io/ogra/{size}/22_2.png"}}]},{"id":34275,"title":"Unable to access files under snap directory","fancy_title":"Unable to access files under snap directory","slug":"unable-to-access-files-under-snap-directory","posts_count":6,"reply_count":2,"highest_post_number":6,"image_url":null,"created_at":"2023-03-10T06:21:24.919Z","last_posted_at":"2023-03-10T15:23:51.603Z","bumped":true,"bumped_at":"2023-03-10T15:23:51.603Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":0,"views":437,"category_id":5,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":14205,"username":"chakka.lokesh","name":"Lokesh Venkata Kumar Chakka","avatar_template":"/letter_avatar/chakka.lokesh/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":13821,"username":"ernestl","name":"Ernest Lotter","avatar_template":"/letter_avatar/ernestl/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":9,"username":"ogra","name":"Oliver Grawert","avatar_template":"/user_avatar/forum.snapcraft.io/ogra/{size}/22_2.png"}}]},{"id":33013,"title":"Install snapd on arm64 based amazon linux","fancy_title":"Install snapd on arm64 based amazon linux","slug":"install-snapd-on-arm64-based-amazon-linux","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-12-09T13:28:58.652Z","last_posted_at":"2022-12-09T13:28:58.791Z","bumped":true,"bumped_at":"2022-12-09T13:28:58.791Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":0,"views":215,"category_id":5,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":13667,"username":"mc1000","name":"Michele Cipriano","avatar_template":"/letter_avatar/mc1000/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png"}}]},{"id":34292,"title":"/snap/bin not in PATH","fancy_title":"/snap/bin not in PATH","slug":"snap-bin-not-in-path","posts_count":3,"reply_count":0,"highest_post_number":3,"image_url":null,"created_at":"2023-03-10T15:58:54.027Z","last_posted_at":"2023-03-10T16:46:05.513Z","bumped":true,"bumped_at":"2023-03-10T16:55:37.951Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":0,"views":713,"category_id":5,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":14192,"username":"C4albert","name":"Kali","avatar_template":"/user_avatar/forum.snapcraft.io/c4albert/{size}/9654_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":13169,"username":"SamAlex","name":"","avatar_template":"/user_avatar/forum.snapcraft.io/samalex/{size}/9155_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":9,"username":"ogra","name":"Oliver Grawert","avatar_template":"/user_avatar/forum.snapcraft.io/ogra/{size}/22_2.png"}}]},{"id":34485,"title":"Cannot install figma-linux through snap in kali linux","fancy_title":"Cannot install figma-linux through snap in kali linux","slug":"cannot-install-figma-linux-through-snap-in-kali-linux","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":"//forum-snapcraft-io.s3.dualstack.us-east-1.amazonaws.com/original/2X/b/b894372fdd802afb4f5c1d3301757311b7a6e4f5.png","created_at":"2023-03-25T17:43:04.093Z","last_posted_at":"2023-03-26T16:45:25.985Z","bumped":true,"bumped_at":"2023-03-26T16:45:25.985Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":0,"views":122,"category_id":5,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":14277,"username":"BlackrosE1","name":"Mushraf Parwej","avatar_template":"/letter_avatar/blackrose1/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":13970,"username":"soumyaDghosh","name":"Soumyadeep Ghosh","avatar_template":"/letter_avatar/soumyadghosh/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png"}}]}],"tags":[],"id":23876,"title":"Proposal: add polkit and polkit-agent interfaces to snapd","fancy_title":"Proposal: add polkit and polkit-agent interfaces to snapd","posts_count":3,"created_at":"2021-04-14T09:56:17.740Z","views":855,"reply_count":1,"like_count":2,"last_posted_at":"2021-04-28T05:44:13.942Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"proposal-add-polkit-and-polkit-agent-interfaces-to-snapd","category_id":5,"word_count":1819,"deleted_at":null,"user_id":393,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_23876","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":3,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"topic_timer":null,"message_bus_last_id":0,"participant_count":2,"show_read_indicator":false,"thumbnails":null,"details":{"notification_level":1,"participants":[{"id":393,"username":"jamesh","name":"James Henstridge","avatar_template":"/user_avatar/forum.snapcraft.io/jamesh/{size}/3947_2.png","post_count":2,"primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_color":null,"primary_group_flair_bg_color":null},{"id":2432,"username":"alexmurray","name":"Alex Murray","avatar_template":"/user_avatar/forum.snapcraft.io/alexmurray/{size}/4397_2.png","post_count":1,"primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_color":null,"primary_group_flair_bg_color":null}],"created_by":{"id":393,"username":"jamesh","name":"James Henstridge","avatar_template":"/user_avatar/forum.snapcraft.io/jamesh/{size}/3947_2.png"},"last_poster":{"id":393,"username":"jamesh","name":"James Henstridge","avatar_template":"/user_avatar/forum.snapcraft.io/jamesh/{size}/3947_2.png"},"links":[{"url":"https://forum.snapcraft.io/t/allow-snapped-daemons-to-use-polkit-authorisation/9050","title":"Allow snapped daemons to use polkit authorisation","internal":true,"attachment":false,"reflection":false,"clicks":3,"user_id":393,"domain":"forum.snapcraft.io","root_domain":"snapcraft.io"},{"url":"https://github.com/snapcore/snapd/pull/9986","title":"polkit: add a package to validate polkit policy files by jhenstridge · Pull Request #9986 · snapcore/snapd · GitHub","internal":false,"attachment":false,"reflection":false,"clicks":1,"user_id":393,"domain":"github.com","root_domain":"github.com"}]}}