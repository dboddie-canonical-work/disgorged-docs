{"post_stream":{"posts":[{"id":35486,"name":"Robin","username":"nottrobin","avatar_template":"/letter_avatar/nottrobin/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png","created_at":"2018-10-11T10:56:13.837Z","cooked":"\u003cp\u003e\u003ca href=\"https://index.ros.org/doc/ros2/\"\u003eROS 2\u003c/a\u003e is distributed via Open Robotics’ own Debian archive, along with many community-supported tools. It’s possible to get your own application into their archive as well, but it requires that the application is open-source.\u003c/p\u003e\n\u003cp\u003eYou’re also left with the question of how to update ROS 2 and your application on a robotic platform that has already been shipped. With \u003cem\u003esnapcraft\u003c/em\u003e it’s just one command to bundle a specific ROS 2 version along with your application (proprietary or open-source) into a snap that works anywhere and can be automatically updated.\u003c/p\u003e\n\u003ch2\u003eWhy are snaps good for ROS 2 projects?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cstrong\u003eSnaps are easy to discover and install\u003c/strong\u003e\nMillions of users can browse and install snaps graphically in the Snap Store or from the command-line.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eSnaps install and run the same across Linux\u003c/strong\u003e\nBundle the exact versions of the tools you need, including ROS 2,  along with all of your app’s dependencies, be they modules or system libraries.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eSnaps automatically update to the latest version\u003c/strong\u003e\nFour times a day, users’ systems will check for new versions and upgrade in the background.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eUpgrades are not disruptive\u003c/strong\u003e\nBecause upgrades are not in-place, users can keep your app open as it’s upgraded in the background.\u003c/li\u003e\n\u003cli\u003e\n\u003cstrong\u003eUpgrades are safe\u003c/strong\u003e\nIf your app fails to upgrade, users automatically roll back to the previous revision with data preserved.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eBuild a snap in 20 minutes\u003c/h3\u003e\n\u003cp\u003eReady to get started? By the end of this guide, you’ll understand how to make a snap of your app that can be published in the \u003ca href=\"https://snapcraft.io/store\"\u003eSnap Store\u003c/a\u003e, showcasing it to millions of Linux users.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cimg src=\"https://forum.snapcraft.io/images/emoji/emoji_one/information_source.png?v=9\" title=\":information_source:\" class=\"emoji\" alt=\":information_source:\"\u003e For a brief overview of the snap creation process, including how to install \u003cem\u003esnapcraft\u003c/em\u003e and how it’s used, see \u003ca href=\"/t/snapcraft-overview/8940\"\u003eSnapcraft overview\u003c/a\u003e. For a more comprehensive breakdown of the steps involved, take a look at \u003ca href=\"/t/creating-a-snap/6799\"\u003eCreating a snap\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eGetting started\u003c/h2\u003e\n\u003cp\u003eThere are currently three supported bases for ROS 2, core18, core20 and core22.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://snapcraft.io/core18\"\u003ecore18\u003c/a\u003e is based on\u003ca href=\"http://releases.ubuntu.com/18.04/\"\u003e Ubuntu 18.04 LTS\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://snapcraft.io/core20\"\u003ecore20\u003c/a\u003e is based on\u003ca href=\"http://releases.ubuntu.com/20.04/\"\u003e Ubuntu 20.04 LTS\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://snapcraft.io/core22\"\u003ecore22\u003c/a\u003e is based on\u003ca href=\"http://releases.ubuntu.com/22.04/\"\u003e Ubuntu 22.04 LTS\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eLet us explore the differences between the different bases.\u003c/p\u003e\n\u003ch3 id=\"heading--core18\"\u003ecore18\u003c/h3\u003e\n\u003cdetails\u003e\n\u003csummary\u003e\ncore18 getting started\u003c/summary\u003e\n\u003cp\u003eSnaps are defined in a single YAML file placed in the root folder of your project. The following example shows the entire \u003cem\u003esnapcraft.yaml\u003c/em\u003e file for an example project, \u003ca href=\"https://github.com/snapcraft-docs/ros2-talker-listener\"\u003eros2-talker-listener\u003c/a\u003e.  Don’t worry, we’ll break this down.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003ename: ros2-talker-listener\nversion: '0.1'\nsummary: ROS 2 Talker/Listener Example\ndescription: |\n  This example launches a ROS 2 talker and listener.\n\nbase: core18\nconfinement: devmode\n\nparts:\n  ros-demos:\n    plugin: colcon\n    source: https://github.com/ros2/demos.git\n    source-branch: dashing\n    colcon-rosdistro: dashing\n    colcon-source-space: demo_nodes_cpp\n    stage-packages: [ros-dashing-ros2launch]\n\napps:\n  ros2-talker-listener:\n    command: opt/ros/dashing/bin/ros2 launch demo_nodes_cpp talker_listener.launch.py\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can download the example repository with the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ git clone https://github.com/snapcraft-docs/ros2-talker-listener\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eMetadata\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003esnapcraft.yaml\u003c/code\u003e file starts with a small amount of human-readable metadata, which usually can be lifted from the GitHub description or project README.md. This data is used in the \u003ca href=\"https://snapcraft.io/plotjuggler\"\u003epresentation of your app in the Snap Store\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003ename: ros2-talker-listener\nversion: '0.1'\nsummary: ROS 2 Talker/Listener Example\ndescription: |\n  This example launches a ROS 2 talker and listener.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ename\u003c/code\u003e must be unique in the Snap Store. Valid snap names consist of lower-case alphanumeric characters and hyphens. They cannot be all numbers and they also cannot start or end with a hyphen.\u003c/p\u003e\n\u003cp\u003eVersions carry no semantic meaning in snaps and this version is arbitrary. It’s also possible to write a script to calculate the version, or to take a tag or commit from a git repository.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003esummary\u003c/code\u003e can not exceed 79 characters. You can use a chevron ‘\u0026gt;’ in the \u003ccode\u003edescription\u003c/code\u003e key to declare a multi-line description.\u003c/p\u003e\n\u003cp\u003eFor more information about top level metadata, see, \u003ca href=\"https://snapcraft.io/docs/snapcraft-top-level-metadata\"\u003etop-level-metadata\u003c/a\u003e.\u003c/p\u003e\n\u003ch4\u003eBase\u003c/h4\u003e\n\u003cp\u003eThe base keyword defines a special kind of snap that provides a run-time environment with a minimal set of libraries that are common to most applications. They’re transparent to users, but they need to be considered, and specified, when building a snap.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003ebase: core18\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ca href=\"https://snapcraft.io/core18\"\u003e\u003ccode\u003ecore18\u003c/code\u003e\u003c/a\u003e is based on \u003ca href=\"http://releases.ubuntu.com/18.04/\"\u003eUbuntu 18.04 LTS\u003c/a\u003e. It is therefore the base for ROS Melodic and ROS 2 Dashing snaps.\u003c/p\u003e\n\u003ch4\u003eSecurity model\u003c/h4\u003e\n\u003cp\u003eTo get started we won’t confine this application. Unconfined applications, specified with \u003ccode\u003edevmode\u003c/code\u003e, can only be released to the hidden \u003ca href=\"https://snapcraft.io/docs/channels#heading--risk-levels\"\u003e“edge” channel\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003econfinement: devmode\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor more information about security model, see, \u003ca href=\"https://snapcraft.io/docs/choosing-a-security-model\"\u003echoosing-a-security-model\u003c/a\u003e.\u003c/p\u003e\n\u003ch4\u003eParts\u003c/h4\u003e\n\u003cp\u003eParts define how to build your app and can be anything: programs, libraries, or other assets needed to create and run your application. Their source can be local directories, remote git repositories, or tarballs. In this example, we have a single part: ros-demos.\u003c/p\u003e\n\u003cp\u003eSnapcraft relies on well known and well established ROS tools such as, in this example, \u003ccode\u003ecolcon\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It is easy to forget the importance of complete install rules, i.e. rules for installing every component of the package necessary to run, or every component necessary to use a given library.\u003c/p\u003e\n\u003cp\u003eThe packages you’re building must have install rules, or else \u003ccode\u003esnapcraft\u003c/code\u003e won’t know which components to place into the snap. Make sure you install binaries, libraries, header files, launch files, etc.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003eparts:\n  ros-demos:\n    plugin: colcon\n    source: https://github.com/ros2/demos.git\n    source-branch: dashing\n    colcon-rosdistro: dashing\n    colcon-source-space: demo_nodes_cpp\n    stage-packages: [ros-dashing-ros2launch]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor more details on colcon-specific metadata, see \u003ca href=\"https://snapcraft.io/docs/the-colcon-plugin#heading--core18\"\u003ethe colcon plugin documentation\u003c/a\u003e. For more information about general parts metadata, see \u003ca href=\"https://snapcraft.io/docs/snapcraft-parts-metadata\"\u003eparts-metadata\u003c/a\u003e.\u003c/p\u003e\n\u003ch4\u003eApps\u003c/h4\u003e\n\u003cp\u003eApps are the commands and services exposed to end users. Each entry under \u003ccode\u003eapps\u003c/code\u003e is the command name that should be exposed to the end users.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ecommand\u003c/code\u003e specifies the full path to the binary to be run.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003eapps:\n  ros2-talker-listener:\n    command: opt/ros/dashing/bin/ros2 launch demo_nodes_cpp talker_listener.launch.py\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn snap, an application is usually prefixed by the snap name so that the application \u003ccode\u003emy-app\u003c/code\u003e from the snap \u003ccode\u003emy-snap\u003c/code\u003e can be executed calling \u003ccode\u003emy-snap.my-app\u003c/code\u003e. However, if both the snap and the app are called the same, as is the case in our ROS 2 example, the execution command collapses to avoid the tediousness of writing twice the same words. The command \u003ccode\u003eros2-talker-listener.ros2-talker-listener\u003c/code\u003e simply becomes \u003ccode\u003eros2-talker-listener\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eBuilding the snap\u003c/h3\u003e\n\u003cp\u003eAfter you’ve created the \u003cem\u003esnapcraft.yaml\u003c/em\u003e, you can build the snap by simply executing the \u003cem\u003esnapcraft\u003c/em\u003e command in the project directory:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft\nUsing 'snapcraft.yaml': Project assets will be searched for from the 'snap' directory.\nLaunching a VM.\n[...]\nSnapped ros2-talker-listener_0.1_amd64.snap\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"p-notification--caution\"\u003e\n\u003cdiv class=\"p-notification__response\"\u003e\n\u003cspan class=\"p-notification__status\"\u003e\nWarning: \u003c/span\u003e\n\u003cp\u003eThe warnings regarding missing libraries that you might see when building your snap are false positive. These libraries are build time dependencies only.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003eThe resulting snap can be installed locally. This requires the \u003ccode\u003e--dangerous\u003c/code\u003e flag because the snap is not signed by the Snap Store. The \u003ccode\u003e--devmode\u003c/code\u003e flag acknowledges that you are installing an unconfined application:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ sudo snap install ros2-talker-listener_*.snap --devmode --dangerous\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can then try it out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ ros2-talker-listener\n[INFO] [launch]: All log files can be found below /home/user/snap/ros2-talker-listener/x1/.ros/log/2022-03-09-15-33-33-276616-computer-1876564\n[INFO] [launch]: Default logging verbosity is set to INFO\n[INFO] [talker-1]: process started with pid [1876618]\n[INFO] [listener-2]: process started with pid [1876620]\n[talker-1] [INFO] [1646836414.794632135] [talker]: Publishing: 'Hello World: 1'\n[listener-2] [INFO] [1646836414.795643603] [listener]: I heard: [Hello World: 1]\n[talker-1] [INFO] [1646836415.794321203] [talker]: Publishing: 'Hello World: 2'\n[listener-2] [INFO] [1646836415.795037146] [listener]: I heard: [Hello World: 2]\n[...]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemoving the snap is simple too:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ sudo snap remove ros2-talker-listener\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce done developing your snap, you can easily clean up the build environment:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft clean\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\u003chr\u003e\n\u003ch3 id=\"heading--core20\"\u003ecore20\u003c/h3\u003e\n\u003cdetails\u003e\n\u003csummary\u003e\ncore20 getting started\u003c/summary\u003e\n\u003cp\u003eSnaps are defined in a single YAML file placed in the root folder of your project. The following example shows the entire \u003cem\u003esnapcraft.yaml\u003c/em\u003e file for an example project, \u003ca href=\"https://github.com/snapcraft-docs/ros2-talker-listener-core20\"\u003eros2-talker-listener-core20\u003c/a\u003e. Don’t worry, we’ll break this down.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003ename: ros2-talker-listener\nversion: '0.1'\nsummary: ROS 2 Talker/Listener Example\ndescription: |\n This example launches a ROS 2 talker and listener.\n \nconfinement: devmode\nbase: core20\n \nparts:\n ros-demos:\n   plugin: colcon\n   source: https://github.com/ros2/demos.git\n   source-branch: foxy\n   source-subdir: demo_nodes_cpp\n   stage-packages: [ros-foxy-ros2launch]\n \napps:\n ros2-talker-listener:\n   command: opt/ros/foxy/bin/ros2 launch demo_nodes_cpp talker_listener.launch.py\n   extensions: [ros2-foxy]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can download the example repository with the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ git clone https://github.com/snapcraft-docs/ros2-talker-listener-core20\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eMetadata\u003c/h4\u003e\n\u003cp\u003eThe \u003cem\u003esnapcraft.yaml\u003c/em\u003e file starts with a small amount of human-readable metadata, which usually can be lifted from the GitHub description or project README.md. This data is used in the presentation of your app in the Snap Store (see e.g. \u003ca href=\"https://snapcraft.io/plotjuggler\"\u003ethe PlotJuggler front page\u003c/a\u003e).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003ename: ros2-talker-listener\nversion: '0.1'\nsummary: ROS 2 Talker/Listener Example\ndescription: |\n This example launches a ROS 2 talker and listener.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ename\u003c/code\u003e must be unique in the Snap Store. Valid snap names consist of lower-case alphanumeric characters and hyphens. They cannot be all numbers and they also cannot start or end with a hyphen.\u003c/p\u003e\n\u003cp\u003eThis is a declarative version of the packaged software and is not linked to the version of the snap itself. It’s also possible to write a script to calculate the version, or to take a tag or commit from a git repository.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003esummary\u003c/code\u003e can not exceed 79 characters. You can use a chevron ‘\u0026gt;’ in the \u003ccode\u003edescription\u003c/code\u003e key to declare a multi-line description.\u003c/p\u003e\n\u003cp\u003eFor more information about top level metadata, see, \u003ca href=\"https://snapcraft.io/docs/snapcraft-top-level-metadata\"\u003etop-level-metadata\u003c/a\u003e.\u003c/p\u003e\n\u003ch4\u003eBase\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003ebase\u003c/code\u003e keyword defines a special kind of snap that provides a run-time environment with a minimal set of libraries that are common to most applications. They’re transparent to users, but they need to be considered, and specified, when building a snap.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003ebase: core20\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ca href=\"https://snapcraft.io/core20\"\u003ecore20\u003c/a\u003e is the current standard base for snap building and is based on\u003ca href=\"http://releases.ubuntu.com/20.04/\"\u003e Ubuntu 20.04 LTS\u003c/a\u003e. It is therefore the base for ROS Noetic and ROS 2 Foxy snaps.\u003c/p\u003e\n\u003ch4\u003eSecurity model\u003c/h4\u003e\n\u003cp\u003eTo get started, we won’t confine this application. Unconfined applications, specified with \u003ccode\u003edevmode\u003c/code\u003e, can only be released to the \u003ca href=\"https://snapcraft.io/docs/channels#heading--risk-levels\"\u003e“edge” channel\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003econfinement: devmode\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor more information about security model, see, \u003ca href=\"https://snapcraft.io/docs/choosing-a-security-model\"\u003echoosing-a-security-model\u003c/a\u003e.\u003c/p\u003e\n\u003ch4\u003eParts\u003c/h4\u003e\n\u003cp\u003eParts define how to build your app and can be anything: programs, libraries, or other assets needed to create and run your application. Their source can be local directories, remote git repositories, or tarballs. In this example, we have a single part: ros-demos.\u003c/p\u003e\n\u003cp\u003eSnapcraft relies on well known and well established ROS tools such as, in this example, \u003ccode\u003ecolcon\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It is easy to forget the importance of complete install rules, i.e. rules for installing every component of the package necessary to run, or every component necessary to use a given library.\u003c/p\u003e\n\u003cp\u003eThe packages you’re building must have install rules, or else snapcraft won’t know which components to place into the snap. Make sure you install binaries, libraries, header files, launch files, etc.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003eparts:\n ros-demos:\n   plugin: colcon\n   source: https://github.com/ros2/demos.git\n   source-branch: foxy\n   source-subdir: demo_nodes_cpp\n   stage-packages: [ros-foxy-ros2launch]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor more details on colcon-specific metadata, see \u003ca href=\"https://snapcraft.io/docs/the-colcon-plugin#heading--core20\"\u003ethe colcon plugin documentation\u003c/a\u003e. For more information about general parts metadata, see \u003ca href=\"https://snapcraft.io/docs/snapcraft-parts-metadata\"\u003eparts-metadata\u003c/a\u003e.\u003c/p\u003e\n\u003ch4\u003eApps\u003c/h4\u003e\n\u003cp\u003eApps are the commands and services exposed to end users. Each entry under apps is the command name that should be exposed to the end users.\u003c/p\u003e\n\u003cp\u003eThe command specifies the path to the binary to be run. This is resolved relative to the root of your snap contents.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003eapps:\n ros2-talker-listener:\n   command: opt/ros/foxy/bin/ros2 launch demo_nodes_cpp talker_listener.launch.py\n   extensions: [ros2-foxy]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor more details about the ros2-foxy extension, see \u003ca href=\"https://snapcraft.io/docs/ros2-extension\"\u003eros2-foxy extension\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn snap, an application is usually prefixed by the snap name so that the application \u003ccode\u003emy-app\u003c/code\u003e from the snap \u003ccode\u003emy-snap\u003c/code\u003e can be executed calling \u003ccode\u003emy-snap.my-app\u003c/code\u003e. However, if both the snap and the app are called the same, as is the case in our ROS 2 example, the execution command collapses to avoid the tediousness of writing twice the same words. The command \u003ccode\u003eros2-talker-listener.ros2-talker-listener\u003c/code\u003e simply becomes \u003ccode\u003eros2-talker-listener\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eBuilding the snap\u003c/h3\u003e\n\u003cp\u003eAfter you’ve created the \u003cem\u003esnapcraft.yaml\u003c/em\u003e, you can build the snap by simply executing the snapcraft command in the project directory:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft\nUsing 'snapcraft.yaml': Project assets will be searched for from the 'snap' directory.\nLaunching a VM.\n[...]\nSnapped ros2-talker-listener_0.1_amd64.snap\n\u003c/code\u003e\u003c/pre\u003e\n\u003cdiv class=\"p-notification--caution\"\u003e\n\u003cdiv class=\"p-notification__response\"\u003e\n\u003cspan class=\"p-notification__status\"\u003e\nWarning: \u003c/span\u003e\n\u003cp\u003eThe warnings regarding missing libraries that you might see when building your snap are false positive. These libraries are build time dependencies only.\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cp\u003eThe resulting snap can be immediately installed. This requires the \u003ccode\u003e--dangerous\u003c/code\u003e flag because the snap is not signed by the Snap Store. Furthermore, the \u003ccode\u003e--devmode\u003c/code\u003e flag acknowledges that you are installing an unconfined application:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ sudo snap install ros2-talker-listener_*.snap --devmode --dangerous\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can then try it out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ ros2-talker-listener\n[INFO] [launch]: All log files can be found below /home/user/snap/ros2-talker-listener/x1/.ros/log/2022-03-09-15-33-33-276616-computer-1876564\n[INFO] [launch]: Default logging verbosity is set to INFO\n[INFO] [talker-1]: process started with pid [1876618]\n[INFO] [listener-2]: process started with pid [1876620]\n[talker-1] [INFO] [1646836414.794632135] [talker]: Publishing: 'Hello World: 1'\n[listener-2] [INFO] [1646836414.795643603] [listener]: I heard: [Hello World: 1]\n[talker-1] [INFO] [1646836415.794321203] [talker]: Publishing: 'Hello World: 2'\n[listener-2] [INFO] [1646836415.795037146] [listener]: I heard: [Hello World: 2]\n[...]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemoving the snap is simple too:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ sudo snap remove ros2-talker-listener\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce done developing your snap, you can easily clean up the build environment:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft clean\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\u003chr\u003e\n\u003ch3 id=\"heading--core22\"\u003ecore22\u003c/h3\u003e\n\u003cdetails\u003e\n\u003csummary\u003e\ncore22 getting started\u003c/summary\u003e\n\u003cp\u003eSnaps are defined in a single YAML file placed in the root folder of your project. The following example shows the entire \u003cem\u003esnapcraft.yaml\u003c/em\u003e file for an example project, \u003ca href=\"https://github.com/snapcraft-docs/ros2-talker-listener-core22\"\u003eros2-talker-listener-core22\u003c/a\u003e. Don’t worry, we’ll break this down.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003ename: ros2-talker-listener\nversion: '0.1'\nsummary: ROS 2 Talker/Listener Example\ndescription: |\n This example launches a ROS 2 talker and listener.\n \nconfinement: devmode\nbase: core22\n \nparts:\n ros-demos:\n   plugin: colcon\n   source: https://github.com/ros2/demos.git\n   source-branch: humble\n   source-subdir: demo_nodes_cpp\n   stage-packages: [ros-humble-ros2launch]\n \napps:\n ros2-talker-listener:\n   command: opt/ros/humble/bin/ros2 launch demo_nodes_cpp talker_listener.launch.py\n   extensions: [ros2-humble]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can download the example repository with the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ git clone https://github.com/snapcraft-docs/ros2-talker-listener-core22\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch4\u003eMetadata\u003c/h4\u003e\n\u003cp\u003eThe \u003cem\u003esnapcraft.yaml\u003c/em\u003e file starts with a small amount of human-readable metadata, which usually can be lifted from the GitHub description or project README.md. This data is used in the presentation of your app in the Snap Store (see e.g. \u003ca href=\"https://snapcraft.io/plotjuggler\"\u003ePlotJuggler front page\u003c/a\u003e).\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003ename: ros2-talker-listener\nversion: '0.1'\nsummary: ROS 2 Talker/Listener Example\ndescription: |\n This example launches a ROS 2 talker and listener.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003ename\u003c/code\u003e must be unique in the Snap Store. Valid snap names consist of lower-case alphanumeric characters and hyphens. They cannot be all numbers and they also cannot start or end with a hyphen.\u003c/p\u003e\n\u003cp\u003eThis is a declarative version of the packaged software and is not linked to the version of the snap itself. It’s also possible to write a script to calculate the version, or to take a tag or commit from a git repository.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003esummary\u003c/code\u003e can not exceed 79 characters. You can use a chevron ‘\u0026gt;’ in the \u003ccode\u003edescription\u003c/code\u003e key to declare a multi-line description.\u003c/p\u003e\n\u003cp\u003eFor more information about top level metadata, see, \u003ca href=\"https://snapcraft.io/docs/snapcraft-top-level-metadata\"\u003etop-level-metadata\u003c/a\u003e.\u003c/p\u003e\n\u003ch4\u003eBase\u003c/h4\u003e\n\u003cp\u003eThe \u003ccode\u003ebase\u003c/code\u003e keyword defines a special kind of snap that provides a run-time environment with a minimal set of libraries that are common to most applications. They’re transparent to users, but they need to be considered, and specified, when building a snap.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003ebase: core22\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003ca href=\"https://snapcraft.io/core22\"\u003ecore22\u003c/a\u003e is the current standard base for snap building and is based on\u003ca href=\"http://releases.ubuntu.com/22.04/\"\u003e Ubuntu 22.04 LTS\u003c/a\u003e. It is therefore the base for ROS 2 Humble snaps.\u003c/p\u003e\n\u003ch4\u003eSecurity model\u003c/h4\u003e\n\u003cp\u003eTo get started, we won’t confine this application. Unconfined applications, specified with \u003ccode\u003edevmode\u003c/code\u003e, can only be released to the \u003ca href=\"https://snapcraft.io/docs/channels#heading--risk-levels\"\u003e“edge” channel\u003c/a\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003econfinement: devmode\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor more information about security model, see, \u003ca href=\"https://snapcraft.io/docs/choosing-a-security-model\"\u003echoosing-a-security-model\u003c/a\u003e.\u003c/p\u003e\n\u003ch4\u003eParts\u003c/h4\u003e\n\u003cp\u003eParts define how to build your app and can be anything: programs, libraries, or other assets needed to create and run your application. Their source can be local directories, remote git repositories, or tarballs. In this example, we have a single part: ‘ros-demos’.\u003c/p\u003e\n\u003cp\u003eSnapcraft relies on well known and well established ROS tools such as, in this example, \u003ccode\u003ecolcon\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e It is easy to forget the importance of complete install rules, i.e. rules for installing every component of the package necessary to run, or every component necessary to use a given library.\u003c/p\u003e\n\u003cp\u003eThe packages you’re building must have install rules, or else snapcraft won’t know which components to place into the snap. Make sure you install binaries, libraries, header files, launch files, etc.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003eparts:\n ros-demos:\n   plugin: colcon\n   source: https://github.com/ros2/demos.git\n   source-branch: humble\n   colcon-packages: [demo_nodes_cpp]\n   stage-packages: [ros-humble-ros2launch]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor more details on colcon-specific metadata, see \u003ca href=\"https://snapcraft.io/docs/the-colcon-plugin#heading--core22\"\u003ethe colcon plugin\u003c/a\u003e documentation. For more information about general parts metadata, see, \u003ca href=\"https://snapcraft.io/docs/snapcraft-parts-metadata\"\u003eparts-metadata\u003c/a\u003e.\u003c/p\u003e\n\u003ch4\u003eApps\u003c/h4\u003e\n\u003cp\u003eApps are the commands and services exposed to end users. Each entry under apps is the command name that should be exposed to the end users.\u003c/p\u003e\n\u003cp\u003eThe command specifies the path to the binary to be run. This is resolved relative to the root of your snap contents.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-yaml\"\u003eapps:\n ros2-talker-listener:\n   command: opt/ros/humble/bin/ros2 launch demo_nodes_cpp talker_listener.launch.py\n   extensions: [ros2-humble]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eFor more details about the ‘ros2-humble’ extension, have a look at its \u003ca href=\"https://snapcraft.io/docs/ros2-humble-extension\"\u003edocumentation\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn snap, an application is usually prefixed by the snap name so that the application \u003ccode\u003emy-app\u003c/code\u003e from the snap \u003ccode\u003emy-snap\u003c/code\u003e can be executed calling \u003ccode\u003emy-snap.my-app\u003c/code\u003e. However, if both the snap and the app are called the same, as is the case in our ROS 2 example, the execution command collapses to avoid the tediousness of writing twice the same words. The command \u003ccode\u003eros2-talker-listener.ros2-talker-listener\u003c/code\u003e simply becomes \u003ccode\u003eros2-talker-listener\u003c/code\u003e.\u003c/p\u003e\n\u003ch3\u003eBuilding the snap\u003c/h3\u003e\n\u003cp\u003eAfter you’ve created the \u003cem\u003esnapcraft.yaml\u003c/em\u003e, you can build the snap by simply executing the snapcraft command in the project directory:\u003c/p\u003e\n\u003cdiv class=\"p-notification--caution\"\u003e\n\u003cdiv class=\"p-notification__response\"\u003e\n\u003cspan class=\"p-notification__status\"\u003e\nWarning: \u003c/span\u003e\n\u003cp\u003eDue to a bug in the current version of Snapcraft, you will not be prompted to first install LXD if it’s not already installed, causing Snapcraft to hang indefinitely.\u003c/p\u003e\n\u003cp\u003eTo install and initialise LXD, run the following:\n\u003ccode\u003esudo snap install lxd \u0026amp;\u0026amp; sudo lxd init --auto\u003c/code\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003c/div\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft                                                                                                                                                                                                                                  \nLaunching instance...\n[...]\nCreated snap package ros2-talker-listener_0.1_amd64.snap\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe resulting snap can be immediately installed. This requires the \u003ccode\u003e--dangerous\u003c/code\u003e flag because the snap is not signed by the Snap Store. Furthermore, the \u003ccode\u003e--devmode\u003c/code\u003e flag acknowledges that you are installing an unconfined application:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ sudo snap install ros2-talker-listener_*.snap --devmode --dangerous\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can then try it out:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ ros2-talker-listener \n[INFO] [launch]: All log files can be found below /home/user/snap/ros2-talker-listener/x1/ros/log/2022-07-08-14-47-49-370040-host-26782\n[INFO] [launch]: Default logging verbosity is set to INFO\n[INFO] [talker-1]: process started with pid [27671]\n[INFO] [listener-2]: process started with pid [27674]\n[talker-1] [INFO] [1657306071.096406021] [talker]: Publishing: 'Hello World: 1'\n[listener-2] [INFO] [1657306071.096756965] [listener]: I heard: [Hello World: 1]\n[talker-1] [INFO] [1657306072.096312107] [talker]: Publishing: 'Hello World: 2'\n[listener-2] [INFO] [1657306072.096541441] [listener]: I heard: [Hello World: 2]\n[...]\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eRemoving the snap is simple too:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ sudo snap remove ros2-talker-listener\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eOnce done developing your snap, you can easily clean up the build environment:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft clean\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/details\u003e\n\u003ch2\u003ePublishing your snap\u003c/h2\u003e\n\u003cp\u003eTo share your snaps you need to publish them in the Snap Store. First, create an account on \u003ca href=\"https://dashboard.snapcraft.io/dev/account/\"\u003ethe dashboard\u003c/a\u003e. Here you can customise how your snaps are presented, review your uploads and control publishing.\u003c/p\u003e\n\u003cp\u003eYou’ll need to choose a unique “developer namespace” as part of the account creation process. This name will be visible by users and associated with your published snaps.\u003c/p\u003e\n\u003cp\u003eMake sure the \u003ccode\u003esnapcraft\u003c/code\u003e command is authenticated using the email address attached to your Snap Store account:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft login\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3\u003eReserve a name for your snap\u003c/h3\u003e\n\u003cp\u003eYou can publish your own version of a snap, provided you do so under a name you have rights to. You can register a name on \u003ca href=\"https://dashboard.snapcraft.io/register-snap/\"\u003edashboard.snapcraft.io\u003c/a\u003e, or by running the following command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft register myrossnap\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eBe sure to update the \u003ccode\u003ename:\u003c/code\u003e in your \u003ccode\u003esnapcraft.yaml\u003c/code\u003e to match this registered name, then run \u003ccode\u003esnapcraft\u003c/code\u003e again.\u003c/p\u003e\n\u003ch3\u003eUpload your snap\u003c/h3\u003e\n\u003cp\u003eUse snapcraft to push the snap to the Snap Store.\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"lang-bash\"\u003e$ snapcraft upload --release=edge myrossnap_*.snap\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIf you’re happy with the result, you can commit the snapcraft.yaml to your GitHub repo and \u003ca href=\"https://build.snapcraft.io\"\u003eturn on automatic builds\u003c/a\u003e so any further commits automatically get released to edge, without requiring you to manually build locally.\u003c/p\u003e\n\u003cp\u003eCongratulations! You’ve just built and published your first ROS snap. For a more in-depth overview of the snap building process, see \u003ca href=\"/t/creating-a-snap/6799\"\u003eCreating a snap\u003c/a\u003e.\u003c/p\u003e","post_number":1,"post_type":1,"updated_at":"2023-05-30T14:44:38.245Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":209,"reads":18,"readers_count":17,"score":1033.4,"yours":false,"topic_id":7823,"topic_slug":"ros-2-deployment-with-snaps","display_username":"Robin","primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_bg_color":null,"primary_group_flair_color":null,"version":19,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://index.ros.org/doc/ros2/","internal":false,"reflection":false,"title":"ROS 2 Overview","clicks":1},{"url":"https://snapcraft.io/store","internal":false,"reflection":false,"title":"Install Linux apps using the Snap Store | Snapcraft","clicks":1},{"url":"https://github.com/snapcraft-docs/ros2-talker-listener","internal":false,"reflection":false,"clicks":1},{"url":"https://build.snapcraft.io","internal":false,"reflection":false,"clicks":1},{"url":"https://forum.snapcraft.io/t/snapcraft-overview/8940","internal":true,"reflection":false,"title":"Snapcraft overview","clicks":1},{"url":"https://snapcraft.io/core20","internal":false,"reflection":false,"title":"Install core20 on Linux | Snap Store","clicks":0},{"url":"https://snapcraft.io/docs/ros2-extension","internal":false,"reflection":false,"clicks":0},{"url":"https://snapcraft.io/docs/the-colcon-plugin#heading--core20","internal":false,"reflection":false,"title":"The colcon plugin | Snapcraft documentation","clicks":0},{"url":"https://github.com/snapcraft-docs/ros2-talker-listener-core20","internal":false,"reflection":false,"clicks":0},{"url":"https://snapcraft.io/docs/the-colcon-plugin#heading--core18","internal":false,"reflection":false,"clicks":0},{"url":"https://snapcraft.io/docs/snapcraft-parts-metadata","internal":false,"reflection":false,"clicks":0},{"url":"https://snapcraft.io/docs/choosing-a-security-model","internal":false,"reflection":false,"clicks":0},{"url":"https://snapcraft.io/docs/channels#heading--risk-levels","internal":false,"reflection":false,"clicks":0},{"url":"https://snapcraft.io/plotjuggler","internal":false,"reflection":false,"title":"Install PlotJuggler on Linux | Snap Store","clicks":0},{"url":"https://snapcraft.io/docs/ros2-humble-extension","internal":false,"reflection":false,"clicks":0},{"url":"https://dashboard.snapcraft.io/dev/account/","internal":false,"reflection":false,"clicks":0},{"url":"https://dashboard.snapcraft.io/register-snap/","internal":false,"reflection":false,"clicks":0},{"url":"https://snapcraft.io/docs/snapcraft-top-level-metadata","internal":false,"reflection":false,"title":"Snapcraft top-level metadata | Snapcraft documentation","clicks":0},{"url":"https://snapcraft.io/core22","internal":false,"reflection":false,"title":"Install core22 on Linux | Snap Store","clicks":0},{"url":"https://snapcraft.io/docs/the-colcon-plugin#heading--core22","internal":false,"reflection":false,"clicks":0},{"url":"https://github.com/snapcraft-docs/ros2-talker-listener-core22","internal":false,"reflection":false,"clicks":0},{"url":"http://releases.ubuntu.com/22.04/","internal":false,"reflection":false,"title":"Ubuntu 22.04 LTS (Jammy Jellyfish)","clicks":0},{"url":"http://releases.ubuntu.com/20.04/","internal":false,"reflection":false,"title":"Ubuntu 20.04.4 LTS (Focal Fossa)","clicks":0},{"url":"http://releases.ubuntu.com/18.04/","internal":false,"reflection":false,"title":"Ubuntu 18.04.2 LTS (Bionic Beaver)","clicks":0},{"url":"https://snapcraft.io/core18","internal":false,"reflection":false,"title":"Install Core 18 for Linux using the Snap Store | Snapcraft","clicks":0},{"url":"https://forum.snapcraft.io/t/the-colcon-plugin/11895","internal":true,"reflection":true,"title":"The colcon plugin","clicks":2},{"url":"https://forum.snapcraft.io/t/proposed-new-documentation-outline-page-deprecated/6718","internal":true,"reflection":true,"title":"Proposed new documentation outline (page deprecated)","clicks":0},{"url":"https://forum.snapcraft.io/t/snapcraft-build-debug-and-publishing-docs-roadmap-page-breakdown/10366","internal":true,"reflection":true,"title":"Snapcraft build, debug and publishing docs roadmap (page breakdown)","clicks":0},{"url":"https://forum.snapcraft.io/t/creating-a-snap/6799","internal":true,"reflection":true,"title":"Creating a snap","clicks":0},{"url":"https://forum.snapcraft.io/t/snap-documentation/11127","internal":true,"reflection":true,"title":"Snap documentation","clicks":0},{"url":"https://forum.snapcraft.io/t/release-notes-snapcraft-3-2/10723","internal":true,"reflection":true,"title":"Release notes: Snapcraft 3.2","clicks":0},{"url":"https://forum.snapcraft.io/t/deploying-robotics-applications/29187","internal":true,"reflection":true,"title":"Deploying robotics applications","clicks":0}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":898,"hidden":false,"trust_level":3,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":true,"last_wiki_edit":"2023-05-30T14:44:38.272Z","can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":35487,"name":"Robin","username":"nottrobin","avatar_template":"/letter_avatar/nottrobin/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png","created_at":"2018-10-11T10:56:32.474Z","cooked":"\u003cp\u003eContent copied verbatim from \u003ca href=\"https://github.com/canonical-docs/snappy-docs/edit/master/build-snaps/ros2.md\"\u003ethe old docs\u003c/a\u003e.\u003c/p\u003e","post_number":2,"post_type":1,"updated_at":"2018-10-11T10:56:32.474Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":16,"readers_count":15,"score":3.0,"yours":false,"topic_id":7823,"topic_slug":"ros-2-deployment-with-snaps","display_username":"Robin","primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_bg_color":null,"primary_group_flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"link_counts":[{"url":"https://github.com/canonical-docs/snappy-docs/edit/master/build-snaps/ros2.md","internal":false,"reflection":false,"clicks":3}],"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":898,"hidden":false,"trust_level":3,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":123892,"name":"Jerome Justin","username":"jclinton830","avatar_template":"/letter_avatar/jclinton830/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png","created_at":"2023-05-23T00:24:56.344Z","cooked":"\u003cp\u003eI have followed this tutorial in Ubuntu 22.04 with ROs2 Humble and I keep getting the following error when trying to build the snap.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e 'SNAPCRAFT_MANAGED_MODE=1', 'apt-get', 'update']' returned non-zero exit status 100.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAre you sure someone tested this work in ubuntu 22.04 before releasing this guide?\u003c/p\u003e","post_number":3,"post_type":1,"updated_at":"2023-05-23T00:24:56.344Z","reply_count":1,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":5,"reads":6,"readers_count":5,"score":31.0,"yours":false,"topic_id":7823,"topic_slug":"ros-2-deployment-with-snaps","display_username":"Jerome Justin","primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_bg_color":null,"primary_group_flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":14599,"hidden":false,"trust_level":0,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":123895,"name":"Siprina Aque","username":"Aquemue","avatar_template":"/user_avatar/forum.snapcraft.io/aquemue/{size}/9858_2.png","created_at":"2023-05-23T04:40:12.380Z","cooked":"\u003cp\u003e\u003ca class=\"mention\" href=\"/u/jclinton830\"\u003e@jclinton830\u003c/a\u003e I recently joined snapcraft Ubuntu and I am facing the same problem. Would anyone mind to assist me?\u003c/p\u003e","post_number":4,"post_type":1,"updated_at":"2023-05-23T04:40:51.570Z","reply_count":0,"reply_to_post_number":null,"quote_count":0,"incoming_link_count":0,"reads":6,"readers_count":5,"score":1.0,"yours":false,"topic_id":7823,"topic_slug":"ros-2-deployment-with-snaps","display_username":"Siprina Aque","primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_bg_color":null,"primary_group_flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":14598,"hidden":false,"trust_level":0,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false},{"id":123953,"name":"","username":"gbeuzeboc","avatar_template":"/letter_avatar/gbeuzeboc/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png","created_at":"2023-05-24T10:35:32.541Z","cooked":"\u003cp\u003e\u003ca class=\"mention\" href=\"/u/jclinton830\"\u003e@jclinton830\u003c/a\u003e or \u003ca class=\"mention\" href=\"/u/aquemue\"\u003e@Aquemue\u003c/a\u003e can you confirm that this is still happening today?\nI just tested in two different environments and everything went fine. It might have been a temporary server unavailability.\nIf it’s still happening could you provide the complete log?\u003c/p\u003e\n\u003cp\u003eThanks\u003c/p\u003e","post_number":5,"post_type":1,"updated_at":"2023-05-24T10:35:32.541Z","reply_count":0,"reply_to_post_number":3,"quote_count":0,"incoming_link_count":0,"reads":4,"readers_count":3,"score":0.6,"yours":false,"topic_id":7823,"topic_slug":"ros-2-deployment-with-snaps","display_username":"","primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_bg_color":null,"primary_group_flair_color":null,"version":1,"can_edit":false,"can_delete":false,"can_recover":false,"can_wiki":false,"read":true,"user_title":null,"reply_to_user":{"username":"jclinton830","avatar_template":"/letter_avatar/jclinton830/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png"},"bookmarked":false,"actions_summary":[],"moderator":false,"admin":false,"staff":false,"user_id":11989,"hidden":false,"trust_level":3,"deleted_at":null,"user_deleted":false,"edit_reason":null,"can_view_edit_history":true,"wiki":false,"can_accept_answer":false,"can_unaccept_answer":false,"accepted_answer":false}],"stream":[35486,35487,123892,123895,123953]},"timeline_lookup":[[1,1709],[3,24],[5,23]],"suggested_topics":[{"id":32228,"title":"Classic linter","fancy_title":"Classic linter","slug":"classic-linter","posts_count":3,"reply_count":1,"highest_post_number":3,"image_url":null,"created_at":"2022-10-18T17:22:41.599Z","last_posted_at":"2022-10-19T13:02:49.311Z","bumped":true,"bumped_at":"2022-10-19T13:02:49.311Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":2,"views":921,"category_id":15,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest","description":"Original Poster, Most Recent Poster","user":{"id":3793,"username":"cmatsuoka","name":"Claudio Matsuoka","avatar_template":"/user_avatar/forum.snapcraft.io/cmatsuoka/{size}/9338_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":393,"username":"jamesh","name":"James Henstridge","avatar_template":"/user_avatar/forum.snapcraft.io/jamesh/{size}/3947_2.png"}}]},{"id":30809,"title":"The ROS 2 Humble extension","fancy_title":"The ROS 2 Humble extension","slug":"the-ros-2-humble-extension","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2022-07-08T20:12:10.035Z","last_posted_at":"2022-07-08T20:12:10.192Z","bumped":true,"bumped_at":"2023-03-13T13:44:02.640Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":0,"views":1245,"category_id":15,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":6739,"username":"artivis","name":"Jeremie Deray","avatar_template":"/user_avatar/forum.snapcraft.io/artivis/{size}/5695_2.png"}}]},{"id":34629,"title":"Release notes: Snapcraft 7.3","fancy_title":"Release notes: Snapcraft 7.3","slug":"release-notes-snapcraft-7-3","posts_count":1,"reply_count":0,"highest_post_number":1,"image_url":null,"created_at":"2023-04-05T17:27:18.665Z","last_posted_at":"2023-04-05T17:27:18.809Z","bumped":true,"bumped_at":"2023-04-05T17:27:18.809Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":0,"views":236,"category_id":15,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":2772,"username":"degville","name":"Graham Morrison","avatar_template":"/user_avatar/forum.snapcraft.io/degville/{size}/2021_2.png"}}]},{"id":30990,"title":"The steam-support interface","fancy_title":"The steam-support interface","slug":"the-steam-support-interface","posts_count":2,"reply_count":0,"highest_post_number":2,"image_url":null,"created_at":"2022-07-22T12:51:00.480Z","last_posted_at":"2022-07-27T09:14:33.468Z","bumped":true,"bumped_at":"2022-07-27T09:14:33.468Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":2,"views":1025,"category_id":15,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":"latest single","description":"Original Poster, Most Recent Poster","user":{"id":2772,"username":"degville","name":"Graham Morrison","avatar_template":"/user_avatar/forum.snapcraft.io/degville/{size}/2021_2.png"}}]},{"id":31051,"title":"Snapcraft Reference","fancy_title":"Snapcraft Reference","slug":"snapcraft-reference","posts_count":5,"reply_count":1,"highest_post_number":5,"image_url":null,"created_at":"2022-07-27T11:51:00.654Z","last_posted_at":"2023-04-24T17:52:24.772Z","bumped":true,"bumped_at":"2023-04-25T05:31:27.608Z","archetype":"regular","unseen":false,"pinned":false,"unpinned":null,"visible":true,"closed":false,"archived":false,"bookmarked":null,"liked":null,"tags":[],"like_count":0,"views":1238,"category_id":15,"featured_link":null,"has_accepted_answer":false,"posters":[{"extras":null,"description":"Original Poster","user":{"id":2772,"username":"degville","name":"Graham Morrison","avatar_template":"/user_avatar/forum.snapcraft.io/degville/{size}/2021_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":14015,"username":"dboddie","name":"David Boddie","avatar_template":"/user_avatar/forum.snapcraft.io/dboddie/{size}/9564_2.png"}},{"extras":null,"description":"Frequent Poster","user":{"id":11710,"username":"rpjday","name":"Robert P. J. Day","avatar_template":"/user_avatar/forum.snapcraft.io/rpjday/{size}/8457_2.png"}},{"extras":"latest","description":"Most Recent Poster","user":{"id":2185,"username":"abitrolly","name":"Anatoli Babenia","avatar_template":"/user_avatar/forum.snapcraft.io/abitrolly/{size}/4528_2.png"}}]}],"tags":[],"id":7823,"title":"ROS 2 deployment with snaps","fancy_title":"ROS 2 deployment with snaps","posts_count":5,"created_at":"2018-10-11T10:56:13.445Z","views":7406,"reply_count":1,"like_count":0,"last_posted_at":"2023-05-24T10:35:32.541Z","visible":true,"closed":false,"archived":false,"has_summary":false,"archetype":"regular","slug":"ros-2-deployment-with-snaps","category_id":15,"word_count":4046,"deleted_at":null,"user_id":898,"featured_link":null,"pinned_globally":false,"pinned_at":null,"pinned_until":null,"image_url":null,"slow_mode_seconds":0,"draft":null,"draft_key":"topic_7823","draft_sequence":null,"unpinned":null,"pinned":false,"current_post_number":1,"highest_post_number":5,"deleted_by":null,"actions_summary":[{"id":4,"count":0,"hidden":false,"can_act":false},{"id":8,"count":0,"hidden":false,"can_act":false},{"id":7,"count":0,"hidden":false,"can_act":false}],"chunk_size":20,"bookmarked":false,"topic_timer":null,"message_bus_last_id":0,"participant_count":4,"show_read_indicator":false,"thumbnails":null,"details":{"notification_level":1,"participants":[{"id":898,"username":"nottrobin","name":"Robin","avatar_template":"/letter_avatar/nottrobin/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png","post_count":2,"primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_color":null,"primary_group_flair_bg_color":null},{"id":11989,"username":"gbeuzeboc","name":"","avatar_template":"/letter_avatar/gbeuzeboc/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png","post_count":1,"primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_color":null,"primary_group_flair_bg_color":null},{"id":14598,"username":"Aquemue","name":"Siprina Aque","avatar_template":"/user_avatar/forum.snapcraft.io/aquemue/{size}/9858_2.png","post_count":1,"primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_color":null,"primary_group_flair_bg_color":null},{"id":14599,"username":"jclinton830","name":"Jerome Justin","avatar_template":"/letter_avatar/jclinton830/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png","post_count":1,"primary_group_name":null,"primary_group_flair_url":null,"primary_group_flair_color":null,"primary_group_flair_bg_color":null}],"created_by":{"id":898,"username":"nottrobin","name":"Robin","avatar_template":"/letter_avatar/nottrobin/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png"},"last_poster":{"id":11989,"username":"gbeuzeboc","name":"","avatar_template":"/letter_avatar/gbeuzeboc/{size}/5_6d6f4cde2641c35611d5cac2fb97c77e.png"},"links":[{"url":"https://github.com/canonical-docs/snappy-docs/edit/master/build-snaps/ros2.md","title":null,"internal":false,"attachment":false,"reflection":false,"clicks":3,"user_id":898,"domain":"github.com","root_domain":"github.com"},{"url":"https://forum.snapcraft.io/t/the-colcon-plugin/11895","title":"The colcon plugin","internal":true,"attachment":false,"reflection":true,"clicks":2,"user_id":2772,"domain":"forum.snapcraft.io","root_domain":"snapcraft.io"},{"url":"https://forum.snapcraft.io/t/snapcraft-overview/8940","title":"Snapcraft overview","internal":true,"attachment":false,"reflection":false,"clicks":1,"user_id":898,"domain":"forum.snapcraft.io","root_domain":"snapcraft.io"},{"url":"https://build.snapcraft.io","title":null,"internal":false,"attachment":false,"reflection":false,"clicks":1,"user_id":898,"domain":"build.snapcraft.io","root_domain":"snapcraft.io"},{"url":"https://github.com/snapcraft-docs/ros2-talker-listener","title":null,"internal":false,"attachment":false,"reflection":false,"clicks":1,"user_id":898,"domain":"github.com","root_domain":"github.com"},{"url":"https://index.ros.org/doc/ros2/","title":"ROS 2 Overview","internal":false,"attachment":false,"reflection":false,"clicks":1,"user_id":898,"domain":"index.ros.org","root_domain":"ros.org"},{"url":"https://snapcraft.io/store","title":"Install Linux apps using the Snap Store | Snapcraft","internal":false,"attachment":false,"reflection":false,"clicks":1,"user_id":898,"domain":"snapcraft.io","root_domain":"snapcraft.io"}]}}